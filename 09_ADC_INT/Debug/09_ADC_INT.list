
09_ADC_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004458  08004458  00005458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044b8  080044b8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044b8  080044b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c0  080044c0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080044c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  08004530  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004530  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5b9  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210d  00000000  00000000  00011651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00013760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000727  00000000  00000000  000140d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fbc  00000000  00000000  000147ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0c9  00000000  00000000  0002c7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939a3  00000000  00000000  00038884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc227  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000cc26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ceed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004440 	.word	0x08004440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004440 	.word	0x08004440

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005be:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <MX_ADC1_Init+0x9c>)
 80005c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005da:	2201      	movs	r2, #1
 80005dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	@ (800064c <MX_ADC1_Init+0xa0>)
 80005f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_ADC1_Init+0x98>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x98>)
 8000608:	2201      	movs	r2, #1
 800060a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	480d      	ldr	r0, [pc, #52]	@ (8000644 <MX_ADC1_Init+0x98>)
 800060e:	f000 fba5 	bl	8000d5c <HAL_ADC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 f93e 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800061c:	2307      	movs	r3, #7
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000624:	2306      	movs	r3, #6
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_ADC1_Init+0x98>)
 800062e:	f000 fdc9 	bl	80011c4 <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000638:	f000 f92e 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000084 	.word	0x20000084
 8000648:	40012000 	.word	0x40012000
 800064c:	0f000001 	.word	0x0f000001

08000650 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1b      	ldr	r2, [pc, #108]	@ (80006dc <HAL_ADC_MspInit+0x8c>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d12f      	bne.n	80006d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067a:	4a19      	ldr	r2, [pc, #100]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 800067c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000680:	6453      	str	r3, [r2, #68]	@ 0x44
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <HAL_ADC_MspInit+0x90>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <HAL_ADC_MspInit+0x94>)
 80006be:	f001 f95d 	bl	800197c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2012      	movs	r0, #18
 80006c8:	f001 f88f 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006cc:	2012      	movs	r0, #18
 80006ce:	f001 f8a8 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012000 	.word	0x40012000
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000734 <MX_GPIO_Init+0x4c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a08      	ldr	r2, [pc, #32]	@ (8000734 <MX_GPIO_Init+0x4c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000746:	2201      	movs	r2, #1
 8000748:	4803      	ldr	r0, [pc, #12]	@ (8000758 <__io_putchar+0x20>)
 800074a:	f001 ff83 	bl	8002654 <HAL_UART_Transmit>

  return ch;
 800074e:	687b      	ldr	r3, [r7, #4]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000d4 	.word	0x200000d4

0800075c <HAL_ADC_ConvCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  adcValue = HAL_ADC_GetValue(&hadc1);
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <HAL_ADC_ConvCpltCallback+0x20>)
 8000766:	f000 fd0b 	bl	8001180 <HAL_ADC_GetValue>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <HAL_ADC_ConvCpltCallback+0x24>)
 8000770:	801a      	strh	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	200000cc 	.word	0x200000cc

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fa52 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f81c 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff ffaa 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000794:	f000 f9a8 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000798:	f7ff ff08 	bl	80005ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 800079c:	4807      	ldr	r0, [pc, #28]	@ (80007bc <main+0x38>)
 800079e:	f000 fb21 	bl	8000de4 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a6:	f000 fab5 	bl	8000d14 <HAL_Delay>
      printf("adcValue -> %4d\n",adcValue);
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <main+0x3c>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <main+0x40>)
 80007b2:	f002 ffd9 	bl	8003768 <iprintf>
      HAL_Delay(500);
 80007b6:	bf00      	nop
 80007b8:	e7f3      	b.n	80007a2 <main+0x1e>
 80007ba:	bf00      	nop
 80007bc:	20000084 	.word	0x20000084
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	08004458 	.word	0x08004458

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	@ 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	@ 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f81b 	bl	8003812 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <SystemClock_Config+0xc8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f4:	4a26      	ldr	r2, [pc, #152]	@ (8000890 <SystemClock_Config+0xc8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fc:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <SystemClock_Config+0xc8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <SystemClock_Config+0xcc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <SystemClock_Config+0xcc>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fa19 	bl	8001c84 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000858:	f000 f81e 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f001 fc7b 	bl	8002174 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000884:	f000 f808 	bl	8000898 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	@ 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094a:	f000 f9c3 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000958:	4802      	ldr	r0, [pc, #8]	@ (8000964 <ADC_IRQHandler+0x10>)
 800095a:	f000 fb01 	bl	8000f60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000084 	.word	0x20000084

08000968 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <USART2_IRQHandler+0x10>)
 800096e:	f001 fefd 	bl	800276c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000d4 	.word	0x200000d4

0800097c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098e:	f3af 8000 	nop.w
 8000992:	4601      	mov	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
  }

  return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	e009      	b.n	80009dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff feb1 	bl	8000738 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf1      	blt.n	80009c8 <_write+0x12>
  }
  return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_close>:

int _close(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a16:	605a      	str	r2, [r3, #4]
  return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:

int _isatty(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	@ (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f002 ff12 	bl	80038b0 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20020000 	.word	0x20020000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	200000d0 	.word	0x200000d0
 8000ac0:	20000270 	.word	0x20000270

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_USART2_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART2_UART_Init+0x4c>)
 8000b20:	f001 fd48 	bl	80025b4 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b2a:	f7ff feb5 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000d4 	.word	0x200000d4
 8000b38:	40004400 	.word	0x40004400

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd0 <HAL_UART_MspInit+0x94>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d133      	bne.n	8000bc6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <HAL_UART_MspInit+0x9c>)
 8000bb2:	f000 fee3 	bl	800197c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2026      	movs	r0, #38	@ 0x26
 8000bbc:	f000 fe15 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc0:	2026      	movs	r0, #38	@ 0x26
 8000bc2:	f000 fe2e 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	@ 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be0:	f7ff ff70 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fe57 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fdb9 	bl	8000784 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c20:	080044c8 	.word	0x080044c8
  ldr r2, =_sbss
 8000c24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c28:	2000026c 	.word	0x2000026c

08000c2c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <DMA1_Stream0_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 fdbb 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe1e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fdd3 	bl	800183e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb0:	f000 fd9b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000011c 	.word	0x2000011c

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000011c 	.word	0x2000011c

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e033      	b.n	8000dda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d109      	bne.n	8000d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fc68 	bl	8000650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d118      	bne.n	8000dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000da2:	f023 0302 	bic.w	r3, r3, #2
 8000da6:	f043 0202 	orr.w	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fb3a 	bl	8001428 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f023 0303 	bic.w	r3, r3, #3
 8000dc2:	f043 0201 	orr.w	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dca:	e001      	b.n	8000dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Start_IT+0x1a>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e0a1      	b.n	8000f42 <HAL_ADC_Start_IT+0x15e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d018      	beq.n	8000e46 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e24:	4b4a      	ldr	r3, [pc, #296]	@ (8000f50 <HAL_ADC_Start_IT+0x16c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a4a      	ldr	r2, [pc, #296]	@ (8000f54 <HAL_ADC_Start_IT+0x170>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0c9a      	lsrs	r2, r3, #18
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e38:	e002      	b.n	8000e40 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f9      	bne.n	8000e3a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d169      	bne.n	8000f28 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e92:	d106      	bne.n	8000ea2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e98:	f023 0206 	bic.w	r2, r3, #6
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ea0:	e002      	b.n	8000ea8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <HAL_ADC_Start_IT+0x174>)
 8000eb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ecc:	f043 0320 	orr.w	r3, r3, #32
 8000ed0:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d129      	bne.n	8000f40 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	e020      	b.n	8000f40 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <HAL_ADC_Start_IT+0x178>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d11b      	bne.n	8000f40 <HAL_ADC_Start_IT+0x15c>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f043 0210 	orr.w	r2, r3, #16
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	40012300 	.word	0x40012300
 8000f5c:	40012000 	.word	0x40012000

08000f60 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f003 0320 	and.w	r3, r3, #32
 8000f8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d049      	beq.n	800102a <HAL_ADC_IRQHandler+0xca>
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d046      	beq.n	800102a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d12b      	bne.n	800101a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d127      	bne.n	800101a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d119      	bne.n	800101a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0220 	bic.w	r2, r2, #32
 8000ff4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f043 0201 	orr.w	r2, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fb9e 	bl	800075c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f06f 0212 	mvn.w	r2, #18
 8001028:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001038:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d057      	beq.n	80010f0 <HAL_ADC_IRQHandler+0x190>
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d054      	beq.n	80010f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d105      	bne.n	800105e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d139      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001072:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001084:	2b00      	cmp	r3, #0
 8001086:	d12b      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001092:	2b00      	cmp	r3, #0
 8001094:	d124      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d11d      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d119      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fa9d 	bl	8001620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f06f 020c 	mvn.w	r2, #12
 80010ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d017      	beq.n	8001136 <HAL_ADC_IRQHandler+0x1d6>
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d014      	beq.n	8001136 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10d      	bne.n	8001136 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f837 	bl	800119a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f06f 0201 	mvn.w	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001144:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <HAL_ADC_IRQHandler+0x218>
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d012      	beq.n	8001178 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f043 0202 	orr.w	r2, r3, #2
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f06f 0220 	mvn.w	r2, #32
 8001166:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f820 	bl	80011ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f06f 0220 	mvn.w	r2, #32
 8001176:	601a      	str	r2, [r3, #0]
  }
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e113      	b.n	8001408 <HAL_ADC_ConfigChannel+0x244>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d925      	bls.n	800123c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68d9      	ldr	r1, [r3, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43da      	mvns	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	400a      	ands	r2, r1
 8001214:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	3b1e      	subs	r3, #30
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b06      	cmp	r3, #6
 8001288:	d824      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d2:	e04c      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d824      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	@ 0x23
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	@ 0x23
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	@ 0x30
 8001324:	e023      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b41      	subs	r3, #65	@ 0x41
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b41      	subs	r3, #65	@ 0x41
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <HAL_ADC_ConfigChannel+0x250>)
 8001370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <HAL_ADC_ConfigChannel+0x254>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10f      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d10b      	bne.n	800139c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_ADC_ConfigChannel+0x254>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0x1f4>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b11      	cmp	r3, #17
 80013b6:	d122      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	@ (800141c <HAL_ADC_ConfigChannel+0x258>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_ADC_ConfigChannel+0x25c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <HAL_ADC_ConfigChannel+0x260>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9a      	lsrs	r2, r3, #18
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f0:	e002      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f9      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40012300 	.word	0x40012300
 8001418:	40012000 	.word	0x40012000
 800141c:	10000012 	.word	0x10000012
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001430:	4b79      	ldr	r3, [pc, #484]	@ (8001618 <ADC_Init+0x1f0>)
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ba:	4a58      	ldr	r2, [pc, #352]	@ (800161c <ADC_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e00f      	b.n	8001526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001524:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0202 	bic.w	r2, r2, #2
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001562:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	3b01      	subs	r3, #1
 8001580:	035a      	lsls	r2, r3, #13
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	e007      	b.n	800159c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051a      	lsls	r2, r3, #20
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015de:	025a      	lsls	r2, r3, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	029a      	lsls	r2, r3, #10
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	0f000001 	.word	0x0f000001

08001620 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fa4a 	bl	8000cfc <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d008      	beq.n	8001888 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2280      	movs	r2, #128	@ 0x80
 800187a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e052      	b.n	800192e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0216 	bic.w	r2, r2, #22
 8001896:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d103      	bne.n	80018b8 <HAL_DMA_Abort+0x62>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0208 	bic.w	r2, r2, #8
 80018c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	e013      	b.n	8001902 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018da:	f7ff fa0f 	bl	8000cfc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d90c      	bls.n	8001902 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e015      	b.n	800192e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e4      	bne.n	80018da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001914:	223f      	movs	r2, #63	@ 0x3f
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d004      	beq.n	8001954 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2280      	movs	r2, #128	@ 0x80
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00c      	b.n	800196e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2205      	movs	r2, #5
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e159      	b.n	8001c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8148 	bne.w	8001c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d005      	beq.n	80019ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d130      	bne.n	8001a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0201 	and.w	r2, r3, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d017      	beq.n	8001a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a2 	beq.w	8001c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b57      	ldr	r3, [pc, #348]	@ (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a56      	ldr	r2, [pc, #344]	@ (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b54      	ldr	r3, [pc, #336]	@ (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1e:	4a52      	ldr	r2, [pc, #328]	@ (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a49      	ldr	r2, [pc, #292]	@ (8001c6c <HAL_GPIO_Init+0x2f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x202>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <HAL_GPIO_Init+0x2f4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x1fe>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a47      	ldr	r2, [pc, #284]	@ (8001c74 <HAL_GPIO_Init+0x2f8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x1fa>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a46      	ldr	r2, [pc, #280]	@ (8001c78 <HAL_GPIO_Init+0x2fc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x1f6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a45      	ldr	r2, [pc, #276]	@ (8001c7c <HAL_GPIO_Init+0x300>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x1f2>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4935      	ldr	r1, [pc, #212]	@ (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a24      	ldr	r2, [pc, #144]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c16:	4a1a      	ldr	r2, [pc, #104]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c40:	4a0f      	ldr	r2, [pc, #60]	@ (8001c80 <HAL_GPIO_Init+0x304>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f aea2 	bls.w	8001998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3724      	adds	r7, #36	@ 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e267      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ca2:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d00c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cae:	4b85      	ldr	r3, [pc, #532]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d112      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cba:	4b82      	ldr	r3, [pc, #520]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e242      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b76      	ldr	r3, [pc, #472]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a75      	ldr	r2, [pc, #468]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b70      	ldr	r3, [pc, #448]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6c      	ldr	r2, [pc, #432]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b69      	ldr	r3, [pc, #420]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a68      	ldr	r2, [pc, #416]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b66      	ldr	r3, [pc, #408]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a65      	ldr	r2, [pc, #404]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ffde 	bl	8000cfc <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7fe ffda 	bl	8000cfc <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e207      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7fe ffca 	bl	8000cfc <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7fe ffc6 	bl	8000cfc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1f3      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	4b51      	ldr	r3, [pc, #324]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d063      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da6:	4b47      	ldr	r3, [pc, #284]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d11c      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db2:	4b44      	ldr	r3, [pc, #272]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d116      	bne.n	8001dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1c7      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4937      	ldr	r1, [pc, #220]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e03a      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d020      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b34      	ldr	r3, [pc, #208]	@ (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7fe ff7f 	bl	8000cfc <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e02:	f7fe ff7b 	bl	8000cfc <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e1a8      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4925      	ldr	r1, [pc, #148]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e015      	b.n	8001e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e36:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x244>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7fe ff5e 	bl	8000cfc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e44:	f7fe ff5a 	bl	8000cfc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e187      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7fe ff3e 	bl	8000cfc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe ff3a 	bl	8000cfc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e167      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
 8001ea2:	e01b      	b.n	8001edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_RCC_OscConfig+0x248>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe ff27 	bl	8000cfc <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	e00e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7fe ff23 	bl	8000cfc <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d907      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e150      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	42470000 	.word	0x42470000
 8001ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	4b88      	ldr	r3, [pc, #544]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ea      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8097 	beq.w	8002018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eee:	4b81      	ldr	r3, [pc, #516]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a7c      	ldr	r2, [pc, #496]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	4b77      	ldr	r3, [pc, #476]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f26:	4b74      	ldr	r3, [pc, #464]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a73      	ldr	r2, [pc, #460]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe fee3 	bl	8000cfc <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe fedf 	bl	8000cfc <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e10c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80020f8 <HAL_RCC_OscConfig+0x474>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2ea>
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	4a63      	ldr	r2, [pc, #396]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6c:	e01c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x30c>
 8001f76:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f82:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a5b      	ldr	r2, [pc, #364]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x324>
 8001f90:	4b58      	ldr	r3, [pc, #352]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	4a57      	ldr	r2, [pc, #348]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f9c:	4b55      	ldr	r3, [pc, #340]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa0:	4a54      	ldr	r2, [pc, #336]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	f023 0304 	bic.w	r3, r3, #4
 8001fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7fe fea4 	bl	8000cfc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fea0 	bl	8000cfc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0cb      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fce:	4b49      	ldr	r3, [pc, #292]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0ee      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fe8e 	bl	8000cfc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fe8a 	bl	8000cfc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0b5      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ee      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b39      	ldr	r3, [pc, #228]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a1 	beq.w	8002164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002022:	4b34      	ldr	r3, [pc, #208]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d05c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d141      	bne.n	80020ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fe5e 	bl	8000cfc <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe fe5a 	bl	8000cfc <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e087      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	4b27      	ldr	r3, [pc, #156]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	041b      	lsls	r3, r3, #16
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	491b      	ldr	r1, [pc, #108]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fe33 	bl	8000cfc <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe fe2f 	bl	8000cfc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e05c      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x416>
 80020b8:	e054      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_RCC_OscConfig+0x478>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe fe1c 	bl	8000cfc <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7fe fe18 	bl	8000cfc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e045      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e038      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x4ec>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d028      	beq.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d121      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11a      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002130:	4013      	ands	r3, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002138:	4293      	cmp	r3, r2
 800213a:	d111      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7fe fd4a 	bl	8000cfc <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fd46 	bl	8000cfc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fcaa 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	0800446c 	.word	0x0800446c
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b094      	sub	sp, #80	@ 0x50
 8002346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002358:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d00d      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x40>
 8002364:	2b08      	cmp	r3, #8
 8002366:	f200 80e1 	bhi.w	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x34>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x3a>
 8002372:	e0db      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b73      	ldr	r3, [pc, #460]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 8002376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002378:	e0db      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237a:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x208>)
 800237c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800237e:	e0d8      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002388:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b6d      	ldr	r3, [pc, #436]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d063      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	2200      	movs	r2, #0
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023aa:	2300      	movs	r3, #0
 80023ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023b2:	4622      	mov	r2, r4
 80023b4:	462b      	mov	r3, r5
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0159      	lsls	r1, r3, #5
 80023c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c4:	0150      	lsls	r0, r2, #5
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4621      	mov	r1, r4
 80023cc:	1a51      	subs	r1, r2, r1
 80023ce:	6139      	str	r1, [r7, #16]
 80023d0:	4629      	mov	r1, r5
 80023d2:	eb63 0301 	sbc.w	r3, r3, r1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e4:	4659      	mov	r1, fp
 80023e6:	018b      	lsls	r3, r1, #6
 80023e8:	4651      	mov	r1, sl
 80023ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ee:	4651      	mov	r1, sl
 80023f0:	018a      	lsls	r2, r1, #6
 80023f2:	4651      	mov	r1, sl
 80023f4:	ebb2 0801 	subs.w	r8, r2, r1
 80023f8:	4659      	mov	r1, fp
 80023fa:	eb63 0901 	sbc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	462b      	mov	r3, r5
 8002420:	eb49 0303 	adc.w	r3, r9, r3
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002432:	4629      	mov	r1, r5
 8002434:	024b      	lsls	r3, r1, #9
 8002436:	4621      	mov	r1, r4
 8002438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800243c:	4621      	mov	r1, r4
 800243e:	024a      	lsls	r2, r1, #9
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002446:	2200      	movs	r2, #0
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800244c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002450:	f7fd ff16 	bl	8000280 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800245c:	e058      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	4618      	mov	r0, r3
 8002468:	4611      	mov	r1, r2
 800246a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
 8002474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248a:	0150      	lsls	r0, r2, #5
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4641      	mov	r1, r8
 8002492:	ebb2 0a01 	subs.w	sl, r2, r1
 8002496:	4649      	mov	r1, r9
 8002498:	eb63 0b01 	sbc.w	fp, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b0:	ebb2 040a 	subs.w	r4, r2, sl
 80024b4:	eb63 050b 	sbc.w	r5, r3, fp
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	00eb      	lsls	r3, r5, #3
 80024c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024c6:	00e2      	lsls	r2, r4, #3
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	464b      	mov	r3, r9
 80024d4:	eb45 0303 	adc.w	r3, r5, r3
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e6:	4629      	mov	r1, r5
 80024e8:	028b      	lsls	r3, r1, #10
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f0:	4621      	mov	r1, r4
 80024f2:	028a      	lsls	r2, r1, #10
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	61fa      	str	r2, [r7, #28]
 8002500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002504:	f7fd febc 	bl	8000280 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x200>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	3301      	adds	r3, #1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800252a:	e002      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x204>)
 800252e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002534:	4618      	mov	r0, r3
 8002536:	3750      	adds	r7, #80	@ 0x50
 8002538:	46bd      	mov	sp, r7
 800253a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	00f42400 	.word	0x00f42400
 8002548:	007a1200 	.word	0x007a1200

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff0 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	0800447c 	.word	0x0800447c

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffdc 	bl	800254c <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0b5b      	lsrs	r3, r3, #13
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	0800447c 	.word	0x0800447c

080025b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e042      	b.n	800264c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe faae 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	@ 0x24
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fd7f 	bl	80030fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800260c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800261c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800262c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d175      	bne.n	8002760 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_UART_Transmit+0x2c>
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e06e      	b.n	8002762 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2221      	movs	r2, #33	@ 0x21
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002692:	f7fe fb33 	bl	8000cfc <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ac:	d108      	bne.n	80026c0 <HAL_UART_Transmit+0x6c>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d104      	bne.n	80026c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e003      	b.n	80026c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026c8:	e02e      	b.n	8002728 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2180      	movs	r1, #128	@ 0x80
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fb1d 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e03a      	b.n	8002762 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3302      	adds	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	e007      	b.n	800271a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1cb      	bne.n	80026ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	@ 0x40
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fae9 	bl	8002d14 <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e006      	b.n	8002762 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0ba      	sub	sp, #232	@ 0xe8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800279e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <HAL_UART_IRQHandler+0x66>
 80027be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c2:	f003 0320 	and.w	r3, r3, #32
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fbd7 	bl	8002f7e <UART_Receive_IT>
      return;
 80027d0:	e273      	b.n	8002cba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80de 	beq.w	8002998 <HAL_UART_IRQHandler+0x22c>
 80027dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80d1 	beq.w	8002998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_UART_IRQHandler+0xae>
 8002802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
 8002826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_UART_IRQHandler+0xf6>
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_UART_IRQHandler+0x126>
 800286e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800287a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f043 0208 	orr.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 820a 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800289c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_UART_IRQHandler+0x14e>
 80028a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fb62 	bl	8002f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c4:	2b40      	cmp	r3, #64	@ 0x40
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_UART_IRQHandler+0x17a>
 80028de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04f      	beq.n	8002986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa6d 	bl	8002dc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f6:	2b40      	cmp	r3, #64	@ 0x40
 80028f8:	d141      	bne.n	800297e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3314      	adds	r3, #20
 8002900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800292a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800293e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1d9      	bne.n	80028fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d013      	beq.n	8002976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002952:	4a8a      	ldr	r2, [pc, #552]	@ (8002b7c <HAL_UART_IRQHandler+0x410>)
 8002954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ffeb 	bl	8001936 <HAL_DMA_Abort_IT>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002970:	4610      	mov	r0, r2
 8002972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002974:	e00e      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f9b6 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297c:	e00a      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f9b2 	bl	8002ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	e006      	b.n	8002994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f9ae 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002992:	e18d      	b.n	8002cb0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	bf00      	nop
    return;
 8002996:	e18b      	b.n	8002cb0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 8167 	bne.w	8002c70 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8160 	beq.w	8002c70 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80029b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8159 	beq.w	8002c70 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	f040 80ce 	bne.w	8002b80 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a9 	beq.w	8002b4c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80029fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a02:	429a      	cmp	r2, r3
 8002a04:	f080 80a2 	bcs.w	8002b4c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1a:	f000 8088 	beq.w	8002b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1d9      	bne.n	8002a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e1      	bne.n	8002a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e3      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e3      	bne.n	8002aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fe94 	bl	8001856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8d9 	bl	8002cfc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002b4a:	e0b3      	b.n	8002cb4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 80ad 	bne.w	8002cb4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b64:	f040 80a6 	bne.w	8002cb4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8c1 	bl	8002cfc <HAL_UARTEx_RxEventCallback>
      return;
 8002b7a:	e09b      	b.n	8002cb4 <HAL_UART_IRQHandler+0x548>
 8002b7c:	08002e8d 	.word	0x08002e8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 808e 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8089 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bca:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bd2:	e841 2300 	strex	r3, r2, [r1]
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e3      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	623b      	str	r3, [r7, #32]
   return(result);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1e3      	bne.n	8002bde <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0310 	bic.w	r3, r3, #16
 8002c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c48:	61fa      	str	r2, [r7, #28]
 8002c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	69b9      	ldr	r1, [r7, #24]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	e841 2300 	strex	r3, r2, [r1]
 8002c54:	617b      	str	r3, [r7, #20]
   return(result);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e3      	bne.n	8002c24 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f847 	bl	8002cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c6e:	e023      	b.n	8002cb8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <HAL_UART_IRQHandler+0x524>
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f910 	bl	8002eae <UART_Transmit_IT>
    return;
 8002c8e:	e014      	b.n	8002cba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00e      	beq.n	8002cba <HAL_UART_IRQHandler+0x54e>
 8002c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f950 	bl	8002f4e <UART_EndTransmit_IT>
    return;
 8002cae:	e004      	b.n	8002cba <HAL_UART_IRQHandler+0x54e>
    return;
 8002cb0:	bf00      	nop
 8002cb2:	e002      	b.n	8002cba <HAL_UART_IRQHandler+0x54e>
      return;
 8002cb4:	bf00      	nop
 8002cb6:	e000      	b.n	8002cba <HAL_UART_IRQHandler+0x54e>
      return;
 8002cb8:	bf00      	nop
  }
}
 8002cba:	37e8      	adds	r7, #232	@ 0xe8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d24:	e03b      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d2c:	d037      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fd ffe5 	bl	8000cfc <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03a      	b.n	8002dbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d023      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b80      	cmp	r3, #128	@ 0x80
 8002d5a:	d020      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b40      	cmp	r3, #64	@ 0x40
 8002d60:	d01d      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d116      	bne.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f81d 	bl	8002dc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2208      	movs	r2, #8
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d0b4      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b095      	sub	sp, #84	@ 0x54
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dee:	643a      	str	r2, [r7, #64]	@ 0x40
 8002df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e5      	bne.n	8002dce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3314      	adds	r3, #20
 8002e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d119      	bne.n	8002e72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 0310 	bic.w	r3, r3, #16
 8002e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e5e:	61ba      	str	r2, [r7, #24]
 8002e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6979      	ldr	r1, [r7, #20]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e80:	bf00      	nop
 8002e82:	3754      	adds	r7, #84	@ 0x54
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff ff21 	bl	8002ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b21      	cmp	r3, #33	@ 0x21
 8002ec0:	d13e      	bne.n	8002f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eca:	d114      	bne.n	8002ef6 <UART_Transmit_IT+0x48>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d110      	bne.n	8002ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	1c9a      	adds	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	e008      	b.n	8002f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	1c59      	adds	r1, r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6211      	str	r1, [r2, #32]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	4619      	mov	r1, r3
 8002f16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fea6 	bl	8002cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08c      	sub	sp, #48	@ 0x30
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b22      	cmp	r3, #34	@ 0x22
 8002f98:	f040 80aa 	bne.w	80030f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa4:	d115      	bne.n	8002fd2 <UART_Receive_IT+0x54>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d111      	bne.n	8002fd2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fd0:	e024      	b.n	800301c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe0:	d007      	beq.n	8002ff2 <UART_Receive_IT+0x74>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <UART_Receive_IT+0x82>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e008      	b.n	8003012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800300c:	b2da      	uxtb	r2, r3
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4619      	mov	r1, r3
 800302a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800302c:	2b00      	cmp	r3, #0
 800302e:	d15d      	bne.n	80030ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0220 	bic.w	r2, r2, #32
 800303e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	2b01      	cmp	r3, #1
 8003074:	d135      	bne.n	80030e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	613b      	str	r3, [r7, #16]
   return(result);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f023 0310 	bic.w	r3, r3, #16
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309c:	623a      	str	r2, [r7, #32]
 800309e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	6a3a      	ldr	r2, [r7, #32]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d10a      	bne.n	80030d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe0e 	bl	8002cfc <HAL_UARTEx_RxEventCallback>
 80030e0:	e002      	b.n	80030e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fdf6 	bl	8002cd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e002      	b.n	80030f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3730      	adds	r7, #48	@ 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b0c0      	sub	sp, #256	@ 0x100
 8003102:	af00      	add	r7, sp, #0
 8003104:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003118:	68d9      	ldr	r1, [r3, #12]
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	ea40 0301 	orr.w	r3, r0, r1
 8003124:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	431a      	orrs	r2, r3
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	431a      	orrs	r2, r3
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003154:	f021 010c 	bic.w	r1, r1, #12
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003162:	430b      	orrs	r3, r1
 8003164:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	6999      	ldr	r1, [r3, #24]
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	ea40 0301 	orr.w	r3, r0, r1
 8003182:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b8f      	ldr	r3, [pc, #572]	@ (80033c8 <UART_SetConfig+0x2cc>)
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0xa0>
 8003190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b8d      	ldr	r3, [pc, #564]	@ (80033cc <UART_SetConfig+0x2d0>)
 8003198:	429a      	cmp	r2, r3
 800319a:	d104      	bne.n	80031a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800319c:	f7ff f9f6 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 80031a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031a4:	e003      	b.n	80031ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031a6:	f7ff f9dd 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 80031aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b8:	f040 810c 	bne.w	80033d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031ce:	4622      	mov	r2, r4
 80031d0:	462b      	mov	r3, r5
 80031d2:	1891      	adds	r1, r2, r2
 80031d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031d6:	415b      	adcs	r3, r3
 80031d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031de:	4621      	mov	r1, r4
 80031e0:	eb12 0801 	adds.w	r8, r2, r1
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb43 0901 	adc.w	r9, r3, r1
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fe:	4690      	mov	r8, r2
 8003200:	4699      	mov	r9, r3
 8003202:	4623      	mov	r3, r4
 8003204:	eb18 0303 	adds.w	r3, r8, r3
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800320c:	462b      	mov	r3, r5
 800320e:	eb49 0303 	adc.w	r3, r9, r3
 8003212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003222:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800322a:	460b      	mov	r3, r1
 800322c:	18db      	adds	r3, r3, r3
 800322e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003230:	4613      	mov	r3, r2
 8003232:	eb42 0303 	adc.w	r3, r2, r3
 8003236:	657b      	str	r3, [r7, #84]	@ 0x54
 8003238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800323c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003240:	f7fd f81e 	bl	8000280 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b61      	ldr	r3, [pc, #388]	@ (80033d0 <UART_SetConfig+0x2d4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800325c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003260:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800326c:	415b      	adcs	r3, r3
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003270:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003274:	4641      	mov	r1, r8
 8003276:	eb12 0a01 	adds.w	sl, r2, r1
 800327a:	4649      	mov	r1, r9
 800327c:	eb43 0b01 	adc.w	fp, r3, r1
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800328c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003294:	4692      	mov	sl, r2
 8003296:	469b      	mov	fp, r3
 8003298:	4643      	mov	r3, r8
 800329a:	eb1a 0303 	adds.w	r3, sl, r3
 800329e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a2:	464b      	mov	r3, r9
 80032a4:	eb4b 0303 	adc.w	r3, fp, r3
 80032a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032c0:	460b      	mov	r3, r1
 80032c2:	18db      	adds	r3, r3, r3
 80032c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c6:	4613      	mov	r3, r2
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032d6:	f7fc ffd3 	bl	8000280 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	4b3b      	ldr	r3, [pc, #236]	@ (80033d0 <UART_SetConfig+0x2d4>)
 80032e2:	fba3 2301 	umull	r2, r3, r3, r1
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2264      	movs	r2, #100	@ 0x64
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	1acb      	subs	r3, r1, r3
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032f6:	4b36      	ldr	r3, [pc, #216]	@ (80033d0 <UART_SetConfig+0x2d4>)
 80032f8:	fba3 2302 	umull	r2, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003304:	441c      	add	r4, r3
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003310:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003314:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003320:	415b      	adcs	r3, r3
 8003322:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003328:	4641      	mov	r1, r8
 800332a:	1851      	adds	r1, r2, r1
 800332c:	6339      	str	r1, [r7, #48]	@ 0x30
 800332e:	4649      	mov	r1, r9
 8003330:	414b      	adcs	r3, r1
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003340:	4659      	mov	r1, fp
 8003342:	00cb      	lsls	r3, r1, #3
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334a:	4651      	mov	r1, sl
 800334c:	00ca      	lsls	r2, r1, #3
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	4603      	mov	r3, r0
 8003354:	4642      	mov	r2, r8
 8003356:	189b      	adds	r3, r3, r2
 8003358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800335c:	464b      	mov	r3, r9
 800335e:	460a      	mov	r2, r1
 8003360:	eb42 0303 	adc.w	r3, r2, r3
 8003364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003374:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003378:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800337c:	460b      	mov	r3, r1
 800337e:	18db      	adds	r3, r3, r3
 8003380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003382:	4613      	mov	r3, r2
 8003384:	eb42 0303 	adc.w	r3, r2, r3
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800338e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003392:	f7fc ff75 	bl	8000280 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <UART_SetConfig+0x2d4>)
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	2164      	movs	r1, #100	@ 0x64
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	3332      	adds	r3, #50	@ 0x32
 80033ae:	4a08      	ldr	r2, [pc, #32]	@ (80033d0 <UART_SetConfig+0x2d4>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4422      	add	r2, r4
 80033c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c4:	e106      	b.n	80035d4 <UART_SetConfig+0x4d8>
 80033c6:	bf00      	nop
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40011400 	.word	0x40011400
 80033d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80033e6:	4642      	mov	r2, r8
 80033e8:	464b      	mov	r3, r9
 80033ea:	1891      	adds	r1, r2, r2
 80033ec:	6239      	str	r1, [r7, #32]
 80033ee:	415b      	adcs	r3, r3
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033f6:	4641      	mov	r1, r8
 80033f8:	1854      	adds	r4, r2, r1
 80033fa:	4649      	mov	r1, r9
 80033fc:	eb43 0501 	adc.w	r5, r3, r1
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	00eb      	lsls	r3, r5, #3
 800340a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340e:	00e2      	lsls	r2, r4, #3
 8003410:	4614      	mov	r4, r2
 8003412:	461d      	mov	r5, r3
 8003414:	4643      	mov	r3, r8
 8003416:	18e3      	adds	r3, r4, r3
 8003418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800341c:	464b      	mov	r3, r9
 800341e:	eb45 0303 	adc.w	r3, r5, r3
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003432:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003442:	4629      	mov	r1, r5
 8003444:	008b      	lsls	r3, r1, #2
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344c:	4621      	mov	r1, r4
 800344e:	008a      	lsls	r2, r1, #2
 8003450:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003454:	f7fc ff14 	bl	8000280 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4b60      	ldr	r3, [pc, #384]	@ (80035e0 <UART_SetConfig+0x4e4>)
 800345e:	fba3 2302 	umull	r2, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	011c      	lsls	r4, r3, #4
 8003466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003470:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003474:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	61b9      	str	r1, [r7, #24]
 8003480:	415b      	adcs	r3, r3
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003488:	4641      	mov	r1, r8
 800348a:	1851      	adds	r1, r2, r1
 800348c:	6139      	str	r1, [r7, #16]
 800348e:	4649      	mov	r1, r9
 8003490:	414b      	adcs	r3, r1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034a0:	4659      	mov	r1, fp
 80034a2:	00cb      	lsls	r3, r1, #3
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	4651      	mov	r1, sl
 80034ac:	00ca      	lsls	r2, r1, #3
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	4642      	mov	r2, r8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034bc:	464b      	mov	r3, r9
 80034be:	460a      	mov	r2, r1
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034e0:	4649      	mov	r1, r9
 80034e2:	008b      	lsls	r3, r1, #2
 80034e4:	4641      	mov	r1, r8
 80034e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ea:	4641      	mov	r1, r8
 80034ec:	008a      	lsls	r2, r1, #2
 80034ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80034f2:	f7fc fec5 	bl	8000280 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <UART_SetConfig+0x4e4>)
 80034fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2264      	movs	r2, #100	@ 0x64
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	1acb      	subs	r3, r1, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	@ 0x32
 8003510:	4a33      	ldr	r2, [pc, #204]	@ (80035e0 <UART_SetConfig+0x4e4>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800351c:	441c      	add	r4, r3
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	673b      	str	r3, [r7, #112]	@ 0x70
 8003526:	677a      	str	r2, [r7, #116]	@ 0x74
 8003528:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800352c:	4642      	mov	r2, r8
 800352e:	464b      	mov	r3, r9
 8003530:	1891      	adds	r1, r2, r2
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	415b      	adcs	r3, r3
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353c:	4641      	mov	r1, r8
 800353e:	1851      	adds	r1, r2, r1
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	4649      	mov	r1, r9
 8003544:	414b      	adcs	r3, r1
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003554:	4659      	mov	r1, fp
 8003556:	00cb      	lsls	r3, r1, #3
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800355e:	4651      	mov	r1, sl
 8003560:	00ca      	lsls	r2, r1, #3
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	4603      	mov	r3, r0
 8003568:	4642      	mov	r2, r8
 800356a:	189b      	adds	r3, r3, r2
 800356c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800356e:	464b      	mov	r3, r9
 8003570:	460a      	mov	r2, r1
 8003572:	eb42 0303 	adc.w	r3, r2, r3
 8003576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	663b      	str	r3, [r7, #96]	@ 0x60
 8003582:	667a      	str	r2, [r7, #100]	@ 0x64
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003590:	4649      	mov	r1, r9
 8003592:	008b      	lsls	r3, r1, #2
 8003594:	4641      	mov	r1, r8
 8003596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359a:	4641      	mov	r1, r8
 800359c:	008a      	lsls	r2, r1, #2
 800359e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035a2:	f7fc fe6d 	bl	8000280 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <UART_SetConfig+0x4e4>)
 80035ac:	fba3 1302 	umull	r1, r3, r3, r2
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	2164      	movs	r1, #100	@ 0x64
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	3332      	adds	r3, #50	@ 0x32
 80035be:	4a08      	ldr	r2, [pc, #32]	@ (80035e0 <UART_SetConfig+0x4e4>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	f003 020f 	and.w	r2, r3, #15
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4422      	add	r2, r4
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035da:	46bd      	mov	sp, r7
 80035dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e0:	51eb851f 	.word	0x51eb851f

080035e4 <std>:
 80035e4:	2300      	movs	r3, #0
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	e9c0 3300 	strd	r3, r3, [r0]
 80035ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035f2:	6083      	str	r3, [r0, #8]
 80035f4:	8181      	strh	r1, [r0, #12]
 80035f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80035f8:	81c2      	strh	r2, [r0, #14]
 80035fa:	6183      	str	r3, [r0, #24]
 80035fc:	4619      	mov	r1, r3
 80035fe:	2208      	movs	r2, #8
 8003600:	305c      	adds	r0, #92	@ 0x5c
 8003602:	f000 f906 	bl	8003812 <memset>
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <std+0x58>)
 8003608:	6263      	str	r3, [r4, #36]	@ 0x24
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <std+0x5c>)
 800360c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800360e:	4b0d      	ldr	r3, [pc, #52]	@ (8003644 <std+0x60>)
 8003610:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003612:	4b0d      	ldr	r3, [pc, #52]	@ (8003648 <std+0x64>)
 8003614:	6323      	str	r3, [r4, #48]	@ 0x30
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <std+0x68>)
 8003618:	6224      	str	r4, [r4, #32]
 800361a:	429c      	cmp	r4, r3
 800361c:	d006      	beq.n	800362c <std+0x48>
 800361e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003622:	4294      	cmp	r4, r2
 8003624:	d002      	beq.n	800362c <std+0x48>
 8003626:	33d0      	adds	r3, #208	@ 0xd0
 8003628:	429c      	cmp	r4, r3
 800362a:	d105      	bne.n	8003638 <std+0x54>
 800362c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003634:	f000 b966 	b.w	8003904 <__retarget_lock_init_recursive>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	bf00      	nop
 800363c:	0800378d 	.word	0x0800378d
 8003640:	080037af 	.word	0x080037af
 8003644:	080037e7 	.word	0x080037e7
 8003648:	0800380b 	.word	0x0800380b
 800364c:	20000120 	.word	0x20000120

08003650 <stdio_exit_handler>:
 8003650:	4a02      	ldr	r2, [pc, #8]	@ (800365c <stdio_exit_handler+0xc>)
 8003652:	4903      	ldr	r1, [pc, #12]	@ (8003660 <stdio_exit_handler+0x10>)
 8003654:	4803      	ldr	r0, [pc, #12]	@ (8003664 <stdio_exit_handler+0x14>)
 8003656:	f000 b869 	b.w	800372c <_fwalk_sglue>
 800365a:	bf00      	nop
 800365c:	2000000c 	.word	0x2000000c
 8003660:	080041a1 	.word	0x080041a1
 8003664:	2000001c 	.word	0x2000001c

08003668 <cleanup_stdio>:
 8003668:	6841      	ldr	r1, [r0, #4]
 800366a:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <cleanup_stdio+0x34>)
 800366c:	4299      	cmp	r1, r3
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	d001      	beq.n	8003678 <cleanup_stdio+0x10>
 8003674:	f000 fd94 	bl	80041a0 <_fflush_r>
 8003678:	68a1      	ldr	r1, [r4, #8]
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <cleanup_stdio+0x38>)
 800367c:	4299      	cmp	r1, r3
 800367e:	d002      	beq.n	8003686 <cleanup_stdio+0x1e>
 8003680:	4620      	mov	r0, r4
 8003682:	f000 fd8d 	bl	80041a0 <_fflush_r>
 8003686:	68e1      	ldr	r1, [r4, #12]
 8003688:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <cleanup_stdio+0x3c>)
 800368a:	4299      	cmp	r1, r3
 800368c:	d004      	beq.n	8003698 <cleanup_stdio+0x30>
 800368e:	4620      	mov	r0, r4
 8003690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003694:	f000 bd84 	b.w	80041a0 <_fflush_r>
 8003698:	bd10      	pop	{r4, pc}
 800369a:	bf00      	nop
 800369c:	20000120 	.word	0x20000120
 80036a0:	20000188 	.word	0x20000188
 80036a4:	200001f0 	.word	0x200001f0

080036a8 <global_stdio_init.part.0>:
 80036a8:	b510      	push	{r4, lr}
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <global_stdio_init.part.0+0x30>)
 80036ac:	4c0b      	ldr	r4, [pc, #44]	@ (80036dc <global_stdio_init.part.0+0x34>)
 80036ae:	4a0c      	ldr	r2, [pc, #48]	@ (80036e0 <global_stdio_init.part.0+0x38>)
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	4620      	mov	r0, r4
 80036b4:	2200      	movs	r2, #0
 80036b6:	2104      	movs	r1, #4
 80036b8:	f7ff ff94 	bl	80035e4 <std>
 80036bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036c0:	2201      	movs	r2, #1
 80036c2:	2109      	movs	r1, #9
 80036c4:	f7ff ff8e 	bl	80035e4 <std>
 80036c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036cc:	2202      	movs	r2, #2
 80036ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d2:	2112      	movs	r1, #18
 80036d4:	f7ff bf86 	b.w	80035e4 <std>
 80036d8:	20000258 	.word	0x20000258
 80036dc:	20000120 	.word	0x20000120
 80036e0:	08003651 	.word	0x08003651

080036e4 <__sfp_lock_acquire>:
 80036e4:	4801      	ldr	r0, [pc, #4]	@ (80036ec <__sfp_lock_acquire+0x8>)
 80036e6:	f000 b90e 	b.w	8003906 <__retarget_lock_acquire_recursive>
 80036ea:	bf00      	nop
 80036ec:	20000261 	.word	0x20000261

080036f0 <__sfp_lock_release>:
 80036f0:	4801      	ldr	r0, [pc, #4]	@ (80036f8 <__sfp_lock_release+0x8>)
 80036f2:	f000 b909 	b.w	8003908 <__retarget_lock_release_recursive>
 80036f6:	bf00      	nop
 80036f8:	20000261 	.word	0x20000261

080036fc <__sinit>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	f7ff fff0 	bl	80036e4 <__sfp_lock_acquire>
 8003704:	6a23      	ldr	r3, [r4, #32]
 8003706:	b11b      	cbz	r3, 8003710 <__sinit+0x14>
 8003708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800370c:	f7ff bff0 	b.w	80036f0 <__sfp_lock_release>
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <__sinit+0x28>)
 8003712:	6223      	str	r3, [r4, #32]
 8003714:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <__sinit+0x2c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f5      	bne.n	8003708 <__sinit+0xc>
 800371c:	f7ff ffc4 	bl	80036a8 <global_stdio_init.part.0>
 8003720:	e7f2      	b.n	8003708 <__sinit+0xc>
 8003722:	bf00      	nop
 8003724:	08003669 	.word	0x08003669
 8003728:	20000258 	.word	0x20000258

0800372c <_fwalk_sglue>:
 800372c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003730:	4607      	mov	r7, r0
 8003732:	4688      	mov	r8, r1
 8003734:	4614      	mov	r4, r2
 8003736:	2600      	movs	r6, #0
 8003738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800373c:	f1b9 0901 	subs.w	r9, r9, #1
 8003740:	d505      	bpl.n	800374e <_fwalk_sglue+0x22>
 8003742:	6824      	ldr	r4, [r4, #0]
 8003744:	2c00      	cmp	r4, #0
 8003746:	d1f7      	bne.n	8003738 <_fwalk_sglue+0xc>
 8003748:	4630      	mov	r0, r6
 800374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800374e:	89ab      	ldrh	r3, [r5, #12]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d907      	bls.n	8003764 <_fwalk_sglue+0x38>
 8003754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003758:	3301      	adds	r3, #1
 800375a:	d003      	beq.n	8003764 <_fwalk_sglue+0x38>
 800375c:	4629      	mov	r1, r5
 800375e:	4638      	mov	r0, r7
 8003760:	47c0      	blx	r8
 8003762:	4306      	orrs	r6, r0
 8003764:	3568      	adds	r5, #104	@ 0x68
 8003766:	e7e9      	b.n	800373c <_fwalk_sglue+0x10>

08003768 <iprintf>:
 8003768:	b40f      	push	{r0, r1, r2, r3}
 800376a:	b507      	push	{r0, r1, r2, lr}
 800376c:	4906      	ldr	r1, [pc, #24]	@ (8003788 <iprintf+0x20>)
 800376e:	ab04      	add	r3, sp, #16
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	f853 2b04 	ldr.w	r2, [r3], #4
 8003776:	6881      	ldr	r1, [r0, #8]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f000 f9e9 	bl	8003b50 <_vfiprintf_r>
 800377e:	b003      	add	sp, #12
 8003780:	f85d eb04 	ldr.w	lr, [sp], #4
 8003784:	b004      	add	sp, #16
 8003786:	4770      	bx	lr
 8003788:	20000018 	.word	0x20000018

0800378c <__sread>:
 800378c:	b510      	push	{r4, lr}
 800378e:	460c      	mov	r4, r1
 8003790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003794:	f000 f868 	bl	8003868 <_read_r>
 8003798:	2800      	cmp	r0, #0
 800379a:	bfab      	itete	ge
 800379c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800379e:	89a3      	ldrhlt	r3, [r4, #12]
 80037a0:	181b      	addge	r3, r3, r0
 80037a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80037a6:	bfac      	ite	ge
 80037a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037aa:	81a3      	strhlt	r3, [r4, #12]
 80037ac:	bd10      	pop	{r4, pc}

080037ae <__swrite>:
 80037ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b2:	461f      	mov	r7, r3
 80037b4:	898b      	ldrh	r3, [r1, #12]
 80037b6:	05db      	lsls	r3, r3, #23
 80037b8:	4605      	mov	r5, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	4616      	mov	r6, r2
 80037be:	d505      	bpl.n	80037cc <__swrite+0x1e>
 80037c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037c4:	2302      	movs	r3, #2
 80037c6:	2200      	movs	r2, #0
 80037c8:	f000 f83c 	bl	8003844 <_lseek_r>
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037d6:	81a3      	strh	r3, [r4, #12]
 80037d8:	4632      	mov	r2, r6
 80037da:	463b      	mov	r3, r7
 80037dc:	4628      	mov	r0, r5
 80037de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037e2:	f000 b853 	b.w	800388c <_write_r>

080037e6 <__sseek>:
 80037e6:	b510      	push	{r4, lr}
 80037e8:	460c      	mov	r4, r1
 80037ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ee:	f000 f829 	bl	8003844 <_lseek_r>
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	bf15      	itete	ne
 80037f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003802:	81a3      	strheq	r3, [r4, #12]
 8003804:	bf18      	it	ne
 8003806:	81a3      	strhne	r3, [r4, #12]
 8003808:	bd10      	pop	{r4, pc}

0800380a <__sclose>:
 800380a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380e:	f000 b809 	b.w	8003824 <_close_r>

08003812 <memset>:
 8003812:	4402      	add	r2, r0
 8003814:	4603      	mov	r3, r0
 8003816:	4293      	cmp	r3, r2
 8003818:	d100      	bne.n	800381c <memset+0xa>
 800381a:	4770      	bx	lr
 800381c:	f803 1b01 	strb.w	r1, [r3], #1
 8003820:	e7f9      	b.n	8003816 <memset+0x4>
	...

08003824 <_close_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4d06      	ldr	r5, [pc, #24]	@ (8003840 <_close_r+0x1c>)
 8003828:	2300      	movs	r3, #0
 800382a:	4604      	mov	r4, r0
 800382c:	4608      	mov	r0, r1
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	f7fd f8dd 	bl	80009ee <_close>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_close_r+0x1a>
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	b103      	cbz	r3, 800383e <_close_r+0x1a>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	2000025c 	.word	0x2000025c

08003844 <_lseek_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4d07      	ldr	r5, [pc, #28]	@ (8003864 <_lseek_r+0x20>)
 8003848:	4604      	mov	r4, r0
 800384a:	4608      	mov	r0, r1
 800384c:	4611      	mov	r1, r2
 800384e:	2200      	movs	r2, #0
 8003850:	602a      	str	r2, [r5, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	f7fd f8f2 	bl	8000a3c <_lseek>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d102      	bne.n	8003862 <_lseek_r+0x1e>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	b103      	cbz	r3, 8003862 <_lseek_r+0x1e>
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	2000025c 	.word	0x2000025c

08003868 <_read_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	4d07      	ldr	r5, [pc, #28]	@ (8003888 <_read_r+0x20>)
 800386c:	4604      	mov	r4, r0
 800386e:	4608      	mov	r0, r1
 8003870:	4611      	mov	r1, r2
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	f7fd f880 	bl	800097c <_read>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_read_r+0x1e>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_read_r+0x1e>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	2000025c 	.word	0x2000025c

0800388c <_write_r>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4d07      	ldr	r5, [pc, #28]	@ (80038ac <_write_r+0x20>)
 8003890:	4604      	mov	r4, r0
 8003892:	4608      	mov	r0, r1
 8003894:	4611      	mov	r1, r2
 8003896:	2200      	movs	r2, #0
 8003898:	602a      	str	r2, [r5, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	f7fd f88b 	bl	80009b6 <_write>
 80038a0:	1c43      	adds	r3, r0, #1
 80038a2:	d102      	bne.n	80038aa <_write_r+0x1e>
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b103      	cbz	r3, 80038aa <_write_r+0x1e>
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	2000025c 	.word	0x2000025c

080038b0 <__errno>:
 80038b0:	4b01      	ldr	r3, [pc, #4]	@ (80038b8 <__errno+0x8>)
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000018 	.word	0x20000018

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4d0d      	ldr	r5, [pc, #52]	@ (80038f4 <__libc_init_array+0x38>)
 80038c0:	4c0d      	ldr	r4, [pc, #52]	@ (80038f8 <__libc_init_array+0x3c>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2600      	movs	r6, #0
 80038c8:	42a6      	cmp	r6, r4
 80038ca:	d109      	bne.n	80038e0 <__libc_init_array+0x24>
 80038cc:	4d0b      	ldr	r5, [pc, #44]	@ (80038fc <__libc_init_array+0x40>)
 80038ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003900 <__libc_init_array+0x44>)
 80038d0:	f000 fdb6 	bl	8004440 <_init>
 80038d4:	1b64      	subs	r4, r4, r5
 80038d6:	10a4      	asrs	r4, r4, #2
 80038d8:	2600      	movs	r6, #0
 80038da:	42a6      	cmp	r6, r4
 80038dc:	d105      	bne.n	80038ea <__libc_init_array+0x2e>
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e4:	4798      	blx	r3
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7ee      	b.n	80038c8 <__libc_init_array+0xc>
 80038ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ee:	4798      	blx	r3
 80038f0:	3601      	adds	r6, #1
 80038f2:	e7f2      	b.n	80038da <__libc_init_array+0x1e>
 80038f4:	080044c0 	.word	0x080044c0
 80038f8:	080044c0 	.word	0x080044c0
 80038fc:	080044c0 	.word	0x080044c0
 8003900:	080044c4 	.word	0x080044c4

08003904 <__retarget_lock_init_recursive>:
 8003904:	4770      	bx	lr

08003906 <__retarget_lock_acquire_recursive>:
 8003906:	4770      	bx	lr

08003908 <__retarget_lock_release_recursive>:
 8003908:	4770      	bx	lr
	...

0800390c <_free_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4605      	mov	r5, r0
 8003910:	2900      	cmp	r1, #0
 8003912:	d041      	beq.n	8003998 <_free_r+0x8c>
 8003914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003918:	1f0c      	subs	r4, r1, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	bfb8      	it	lt
 800391e:	18e4      	addlt	r4, r4, r3
 8003920:	f000 f8e0 	bl	8003ae4 <__malloc_lock>
 8003924:	4a1d      	ldr	r2, [pc, #116]	@ (800399c <_free_r+0x90>)
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	b933      	cbnz	r3, 8003938 <_free_r+0x2c>
 800392a:	6063      	str	r3, [r4, #4]
 800392c:	6014      	str	r4, [r2, #0]
 800392e:	4628      	mov	r0, r5
 8003930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003934:	f000 b8dc 	b.w	8003af0 <__malloc_unlock>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d908      	bls.n	800394e <_free_r+0x42>
 800393c:	6820      	ldr	r0, [r4, #0]
 800393e:	1821      	adds	r1, r4, r0
 8003940:	428b      	cmp	r3, r1
 8003942:	bf01      	itttt	eq
 8003944:	6819      	ldreq	r1, [r3, #0]
 8003946:	685b      	ldreq	r3, [r3, #4]
 8003948:	1809      	addeq	r1, r1, r0
 800394a:	6021      	streq	r1, [r4, #0]
 800394c:	e7ed      	b.n	800392a <_free_r+0x1e>
 800394e:	461a      	mov	r2, r3
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b10b      	cbz	r3, 8003958 <_free_r+0x4c>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d9fa      	bls.n	800394e <_free_r+0x42>
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	1850      	adds	r0, r2, r1
 800395c:	42a0      	cmp	r0, r4
 800395e:	d10b      	bne.n	8003978 <_free_r+0x6c>
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	4401      	add	r1, r0
 8003964:	1850      	adds	r0, r2, r1
 8003966:	4283      	cmp	r3, r0
 8003968:	6011      	str	r1, [r2, #0]
 800396a:	d1e0      	bne.n	800392e <_free_r+0x22>
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	6053      	str	r3, [r2, #4]
 8003972:	4408      	add	r0, r1
 8003974:	6010      	str	r0, [r2, #0]
 8003976:	e7da      	b.n	800392e <_free_r+0x22>
 8003978:	d902      	bls.n	8003980 <_free_r+0x74>
 800397a:	230c      	movs	r3, #12
 800397c:	602b      	str	r3, [r5, #0]
 800397e:	e7d6      	b.n	800392e <_free_r+0x22>
 8003980:	6820      	ldr	r0, [r4, #0]
 8003982:	1821      	adds	r1, r4, r0
 8003984:	428b      	cmp	r3, r1
 8003986:	bf04      	itt	eq
 8003988:	6819      	ldreq	r1, [r3, #0]
 800398a:	685b      	ldreq	r3, [r3, #4]
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	bf04      	itt	eq
 8003990:	1809      	addeq	r1, r1, r0
 8003992:	6021      	streq	r1, [r4, #0]
 8003994:	6054      	str	r4, [r2, #4]
 8003996:	e7ca      	b.n	800392e <_free_r+0x22>
 8003998:	bd38      	pop	{r3, r4, r5, pc}
 800399a:	bf00      	nop
 800399c:	20000268 	.word	0x20000268

080039a0 <sbrk_aligned>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	4e0f      	ldr	r6, [pc, #60]	@ (80039e0 <sbrk_aligned+0x40>)
 80039a4:	460c      	mov	r4, r1
 80039a6:	6831      	ldr	r1, [r6, #0]
 80039a8:	4605      	mov	r5, r0
 80039aa:	b911      	cbnz	r1, 80039b2 <sbrk_aligned+0x12>
 80039ac:	f000 fcb4 	bl	8004318 <_sbrk_r>
 80039b0:	6030      	str	r0, [r6, #0]
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 fcaf 	bl	8004318 <_sbrk_r>
 80039ba:	1c43      	adds	r3, r0, #1
 80039bc:	d103      	bne.n	80039c6 <sbrk_aligned+0x26>
 80039be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80039c2:	4620      	mov	r0, r4
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	1cc4      	adds	r4, r0, #3
 80039c8:	f024 0403 	bic.w	r4, r4, #3
 80039cc:	42a0      	cmp	r0, r4
 80039ce:	d0f8      	beq.n	80039c2 <sbrk_aligned+0x22>
 80039d0:	1a21      	subs	r1, r4, r0
 80039d2:	4628      	mov	r0, r5
 80039d4:	f000 fca0 	bl	8004318 <_sbrk_r>
 80039d8:	3001      	adds	r0, #1
 80039da:	d1f2      	bne.n	80039c2 <sbrk_aligned+0x22>
 80039dc:	e7ef      	b.n	80039be <sbrk_aligned+0x1e>
 80039de:	bf00      	nop
 80039e0:	20000264 	.word	0x20000264

080039e4 <_malloc_r>:
 80039e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e8:	1ccd      	adds	r5, r1, #3
 80039ea:	f025 0503 	bic.w	r5, r5, #3
 80039ee:	3508      	adds	r5, #8
 80039f0:	2d0c      	cmp	r5, #12
 80039f2:	bf38      	it	cc
 80039f4:	250c      	movcc	r5, #12
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	4606      	mov	r6, r0
 80039fa:	db01      	blt.n	8003a00 <_malloc_r+0x1c>
 80039fc:	42a9      	cmp	r1, r5
 80039fe:	d904      	bls.n	8003a0a <_malloc_r+0x26>
 8003a00:	230c      	movs	r3, #12
 8003a02:	6033      	str	r3, [r6, #0]
 8003a04:	2000      	movs	r0, #0
 8003a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ae0 <_malloc_r+0xfc>
 8003a0e:	f000 f869 	bl	8003ae4 <__malloc_lock>
 8003a12:	f8d8 3000 	ldr.w	r3, [r8]
 8003a16:	461c      	mov	r4, r3
 8003a18:	bb44      	cbnz	r4, 8003a6c <_malloc_r+0x88>
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7ff ffbf 	bl	80039a0 <sbrk_aligned>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	4604      	mov	r4, r0
 8003a26:	d158      	bne.n	8003ada <_malloc_r+0xf6>
 8003a28:	f8d8 4000 	ldr.w	r4, [r8]
 8003a2c:	4627      	mov	r7, r4
 8003a2e:	2f00      	cmp	r7, #0
 8003a30:	d143      	bne.n	8003aba <_malloc_r+0xd6>
 8003a32:	2c00      	cmp	r4, #0
 8003a34:	d04b      	beq.n	8003ace <_malloc_r+0xea>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	4639      	mov	r1, r7
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	eb04 0903 	add.w	r9, r4, r3
 8003a40:	f000 fc6a 	bl	8004318 <_sbrk_r>
 8003a44:	4581      	cmp	r9, r0
 8003a46:	d142      	bne.n	8003ace <_malloc_r+0xea>
 8003a48:	6821      	ldr	r1, [r4, #0]
 8003a4a:	1a6d      	subs	r5, r5, r1
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7ff ffa6 	bl	80039a0 <sbrk_aligned>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d03a      	beq.n	8003ace <_malloc_r+0xea>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	442b      	add	r3, r5
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	bb62      	cbnz	r2, 8003ac0 <_malloc_r+0xdc>
 8003a66:	f8c8 7000 	str.w	r7, [r8]
 8003a6a:	e00f      	b.n	8003a8c <_malloc_r+0xa8>
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	1b52      	subs	r2, r2, r5
 8003a70:	d420      	bmi.n	8003ab4 <_malloc_r+0xd0>
 8003a72:	2a0b      	cmp	r2, #11
 8003a74:	d917      	bls.n	8003aa6 <_malloc_r+0xc2>
 8003a76:	1961      	adds	r1, r4, r5
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	6025      	str	r5, [r4, #0]
 8003a7c:	bf18      	it	ne
 8003a7e:	6059      	strne	r1, [r3, #4]
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	bf08      	it	eq
 8003a84:	f8c8 1000 	streq.w	r1, [r8]
 8003a88:	5162      	str	r2, [r4, r5]
 8003a8a:	604b      	str	r3, [r1, #4]
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	f000 f82f 	bl	8003af0 <__malloc_unlock>
 8003a92:	f104 000b 	add.w	r0, r4, #11
 8003a96:	1d23      	adds	r3, r4, #4
 8003a98:	f020 0007 	bic.w	r0, r0, #7
 8003a9c:	1ac2      	subs	r2, r0, r3
 8003a9e:	bf1c      	itt	ne
 8003aa0:	1a1b      	subne	r3, r3, r0
 8003aa2:	50a3      	strne	r3, [r4, r2]
 8003aa4:	e7af      	b.n	8003a06 <_malloc_r+0x22>
 8003aa6:	6862      	ldr	r2, [r4, #4]
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	bf0c      	ite	eq
 8003aac:	f8c8 2000 	streq.w	r2, [r8]
 8003ab0:	605a      	strne	r2, [r3, #4]
 8003ab2:	e7eb      	b.n	8003a8c <_malloc_r+0xa8>
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	6864      	ldr	r4, [r4, #4]
 8003ab8:	e7ae      	b.n	8003a18 <_malloc_r+0x34>
 8003aba:	463c      	mov	r4, r7
 8003abc:	687f      	ldr	r7, [r7, #4]
 8003abe:	e7b6      	b.n	8003a2e <_malloc_r+0x4a>
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	d1fb      	bne.n	8003ac0 <_malloc_r+0xdc>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6053      	str	r3, [r2, #4]
 8003acc:	e7de      	b.n	8003a8c <_malloc_r+0xa8>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 f80c 	bl	8003af0 <__malloc_unlock>
 8003ad8:	e794      	b.n	8003a04 <_malloc_r+0x20>
 8003ada:	6005      	str	r5, [r0, #0]
 8003adc:	e7d6      	b.n	8003a8c <_malloc_r+0xa8>
 8003ade:	bf00      	nop
 8003ae0:	20000268 	.word	0x20000268

08003ae4 <__malloc_lock>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	@ (8003aec <__malloc_lock+0x8>)
 8003ae6:	f7ff bf0e 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8003aea:	bf00      	nop
 8003aec:	20000260 	.word	0x20000260

08003af0 <__malloc_unlock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	@ (8003af8 <__malloc_unlock+0x8>)
 8003af2:	f7ff bf09 	b.w	8003908 <__retarget_lock_release_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000260 	.word	0x20000260

08003afc <__sfputc_r>:
 8003afc:	6893      	ldr	r3, [r2, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	b410      	push	{r4}
 8003b04:	6093      	str	r3, [r2, #8]
 8003b06:	da08      	bge.n	8003b1a <__sfputc_r+0x1e>
 8003b08:	6994      	ldr	r4, [r2, #24]
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	db01      	blt.n	8003b12 <__sfputc_r+0x16>
 8003b0e:	290a      	cmp	r1, #10
 8003b10:	d103      	bne.n	8003b1a <__sfputc_r+0x1e>
 8003b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b16:	f000 bb6b 	b.w	80041f0 <__swbuf_r>
 8003b1a:	6813      	ldr	r3, [r2, #0]
 8003b1c:	1c58      	adds	r0, r3, #1
 8003b1e:	6010      	str	r0, [r2, #0]
 8003b20:	7019      	strb	r1, [r3, #0]
 8003b22:	4608      	mov	r0, r1
 8003b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <__sfputs_r>:
 8003b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	18d5      	adds	r5, r2, r3
 8003b34:	42ac      	cmp	r4, r5
 8003b36:	d101      	bne.n	8003b3c <__sfputs_r+0x12>
 8003b38:	2000      	movs	r0, #0
 8003b3a:	e007      	b.n	8003b4c <__sfputs_r+0x22>
 8003b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b40:	463a      	mov	r2, r7
 8003b42:	4630      	mov	r0, r6
 8003b44:	f7ff ffda 	bl	8003afc <__sfputc_r>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d1f3      	bne.n	8003b34 <__sfputs_r+0xa>
 8003b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b50 <_vfiprintf_r>:
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	460d      	mov	r5, r1
 8003b56:	b09d      	sub	sp, #116	@ 0x74
 8003b58:	4614      	mov	r4, r2
 8003b5a:	4698      	mov	r8, r3
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	b118      	cbz	r0, 8003b68 <_vfiprintf_r+0x18>
 8003b60:	6a03      	ldr	r3, [r0, #32]
 8003b62:	b90b      	cbnz	r3, 8003b68 <_vfiprintf_r+0x18>
 8003b64:	f7ff fdca 	bl	80036fc <__sinit>
 8003b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b6a:	07d9      	lsls	r1, r3, #31
 8003b6c:	d405      	bmi.n	8003b7a <_vfiprintf_r+0x2a>
 8003b6e:	89ab      	ldrh	r3, [r5, #12]
 8003b70:	059a      	lsls	r2, r3, #22
 8003b72:	d402      	bmi.n	8003b7a <_vfiprintf_r+0x2a>
 8003b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b76:	f7ff fec6 	bl	8003906 <__retarget_lock_acquire_recursive>
 8003b7a:	89ab      	ldrh	r3, [r5, #12]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	d501      	bpl.n	8003b84 <_vfiprintf_r+0x34>
 8003b80:	692b      	ldr	r3, [r5, #16]
 8003b82:	b99b      	cbnz	r3, 8003bac <_vfiprintf_r+0x5c>
 8003b84:	4629      	mov	r1, r5
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 fb70 	bl	800426c <__swsetup_r>
 8003b8c:	b170      	cbz	r0, 8003bac <_vfiprintf_r+0x5c>
 8003b8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b90:	07dc      	lsls	r4, r3, #31
 8003b92:	d504      	bpl.n	8003b9e <_vfiprintf_r+0x4e>
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b98:	b01d      	add	sp, #116	@ 0x74
 8003b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9e:	89ab      	ldrh	r3, [r5, #12]
 8003ba0:	0598      	lsls	r0, r3, #22
 8003ba2:	d4f7      	bmi.n	8003b94 <_vfiprintf_r+0x44>
 8003ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ba6:	f7ff feaf 	bl	8003908 <__retarget_lock_release_recursive>
 8003baa:	e7f3      	b.n	8003b94 <_vfiprintf_r+0x44>
 8003bac:	2300      	movs	r3, #0
 8003bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bba:	2330      	movs	r3, #48	@ 0x30
 8003bbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003d6c <_vfiprintf_r+0x21c>
 8003bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bc4:	f04f 0901 	mov.w	r9, #1
 8003bc8:	4623      	mov	r3, r4
 8003bca:	469a      	mov	sl, r3
 8003bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bd0:	b10a      	cbz	r2, 8003bd6 <_vfiprintf_r+0x86>
 8003bd2:	2a25      	cmp	r2, #37	@ 0x25
 8003bd4:	d1f9      	bne.n	8003bca <_vfiprintf_r+0x7a>
 8003bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8003bda:	d00b      	beq.n	8003bf4 <_vfiprintf_r+0xa4>
 8003bdc:	465b      	mov	r3, fp
 8003bde:	4622      	mov	r2, r4
 8003be0:	4629      	mov	r1, r5
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ffa1 	bl	8003b2a <__sfputs_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	f000 80a7 	beq.w	8003d3c <_vfiprintf_r+0x1ec>
 8003bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003bf0:	445a      	add	r2, fp
 8003bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 809f 	beq.w	8003d3c <_vfiprintf_r+0x1ec>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c08:	f10a 0a01 	add.w	sl, sl, #1
 8003c0c:	9304      	str	r3, [sp, #16]
 8003c0e:	9307      	str	r3, [sp, #28]
 8003c10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c14:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c16:	4654      	mov	r4, sl
 8003c18:	2205      	movs	r2, #5
 8003c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1e:	4853      	ldr	r0, [pc, #332]	@ (8003d6c <_vfiprintf_r+0x21c>)
 8003c20:	f7fc fade 	bl	80001e0 <memchr>
 8003c24:	9a04      	ldr	r2, [sp, #16]
 8003c26:	b9d8      	cbnz	r0, 8003c60 <_vfiprintf_r+0x110>
 8003c28:	06d1      	lsls	r1, r2, #27
 8003c2a:	bf44      	itt	mi
 8003c2c:	2320      	movmi	r3, #32
 8003c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c32:	0713      	lsls	r3, r2, #28
 8003c34:	bf44      	itt	mi
 8003c36:	232b      	movmi	r3, #43	@ 0x2b
 8003c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c42:	d015      	beq.n	8003c70 <_vfiprintf_r+0x120>
 8003c44:	9a07      	ldr	r2, [sp, #28]
 8003c46:	4654      	mov	r4, sl
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f04f 0c0a 	mov.w	ip, #10
 8003c4e:	4621      	mov	r1, r4
 8003c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c54:	3b30      	subs	r3, #48	@ 0x30
 8003c56:	2b09      	cmp	r3, #9
 8003c58:	d94b      	bls.n	8003cf2 <_vfiprintf_r+0x1a2>
 8003c5a:	b1b0      	cbz	r0, 8003c8a <_vfiprintf_r+0x13a>
 8003c5c:	9207      	str	r2, [sp, #28]
 8003c5e:	e014      	b.n	8003c8a <_vfiprintf_r+0x13a>
 8003c60:	eba0 0308 	sub.w	r3, r0, r8
 8003c64:	fa09 f303 	lsl.w	r3, r9, r3
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	9304      	str	r3, [sp, #16]
 8003c6c:	46a2      	mov	sl, r4
 8003c6e:	e7d2      	b.n	8003c16 <_vfiprintf_r+0xc6>
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	1d19      	adds	r1, r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	9103      	str	r1, [sp, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bfbb      	ittet	lt
 8003c7c:	425b      	neglt	r3, r3
 8003c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003c82:	9307      	strge	r3, [sp, #28]
 8003c84:	9307      	strlt	r3, [sp, #28]
 8003c86:	bfb8      	it	lt
 8003c88:	9204      	strlt	r2, [sp, #16]
 8003c8a:	7823      	ldrb	r3, [r4, #0]
 8003c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c8e:	d10a      	bne.n	8003ca6 <_vfiprintf_r+0x156>
 8003c90:	7863      	ldrb	r3, [r4, #1]
 8003c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c94:	d132      	bne.n	8003cfc <_vfiprintf_r+0x1ac>
 8003c96:	9b03      	ldr	r3, [sp, #12]
 8003c98:	1d1a      	adds	r2, r3, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	9203      	str	r2, [sp, #12]
 8003c9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ca2:	3402      	adds	r4, #2
 8003ca4:	9305      	str	r3, [sp, #20]
 8003ca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003d7c <_vfiprintf_r+0x22c>
 8003caa:	7821      	ldrb	r1, [r4, #0]
 8003cac:	2203      	movs	r2, #3
 8003cae:	4650      	mov	r0, sl
 8003cb0:	f7fc fa96 	bl	80001e0 <memchr>
 8003cb4:	b138      	cbz	r0, 8003cc6 <_vfiprintf_r+0x176>
 8003cb6:	9b04      	ldr	r3, [sp, #16]
 8003cb8:	eba0 000a 	sub.w	r0, r0, sl
 8003cbc:	2240      	movs	r2, #64	@ 0x40
 8003cbe:	4082      	lsls	r2, r0
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	3401      	adds	r4, #1
 8003cc4:	9304      	str	r3, [sp, #16]
 8003cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cca:	4829      	ldr	r0, [pc, #164]	@ (8003d70 <_vfiprintf_r+0x220>)
 8003ccc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cd0:	2206      	movs	r2, #6
 8003cd2:	f7fc fa85 	bl	80001e0 <memchr>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d03f      	beq.n	8003d5a <_vfiprintf_r+0x20a>
 8003cda:	4b26      	ldr	r3, [pc, #152]	@ (8003d74 <_vfiprintf_r+0x224>)
 8003cdc:	bb1b      	cbnz	r3, 8003d26 <_vfiprintf_r+0x1d6>
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	9303      	str	r3, [sp, #12]
 8003cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cec:	443b      	add	r3, r7
 8003cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cf0:	e76a      	b.n	8003bc8 <_vfiprintf_r+0x78>
 8003cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7a8      	b.n	8003c4e <_vfiprintf_r+0xfe>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	3401      	adds	r4, #1
 8003d00:	9305      	str	r3, [sp, #20]
 8003d02:	4619      	mov	r1, r3
 8003d04:	f04f 0c0a 	mov.w	ip, #10
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d0e:	3a30      	subs	r2, #48	@ 0x30
 8003d10:	2a09      	cmp	r2, #9
 8003d12:	d903      	bls.n	8003d1c <_vfiprintf_r+0x1cc>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0c6      	beq.n	8003ca6 <_vfiprintf_r+0x156>
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	e7c4      	b.n	8003ca6 <_vfiprintf_r+0x156>
 8003d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d20:	4604      	mov	r4, r0
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7f0      	b.n	8003d08 <_vfiprintf_r+0x1b8>
 8003d26:	ab03      	add	r3, sp, #12
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <_vfiprintf_r+0x228>)
 8003d2e:	a904      	add	r1, sp, #16
 8003d30:	4630      	mov	r0, r6
 8003d32:	f3af 8000 	nop.w
 8003d36:	4607      	mov	r7, r0
 8003d38:	1c78      	adds	r0, r7, #1
 8003d3a:	d1d6      	bne.n	8003cea <_vfiprintf_r+0x19a>
 8003d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d3e:	07d9      	lsls	r1, r3, #31
 8003d40:	d405      	bmi.n	8003d4e <_vfiprintf_r+0x1fe>
 8003d42:	89ab      	ldrh	r3, [r5, #12]
 8003d44:	059a      	lsls	r2, r3, #22
 8003d46:	d402      	bmi.n	8003d4e <_vfiprintf_r+0x1fe>
 8003d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d4a:	f7ff fddd 	bl	8003908 <__retarget_lock_release_recursive>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	065b      	lsls	r3, r3, #25
 8003d52:	f53f af1f 	bmi.w	8003b94 <_vfiprintf_r+0x44>
 8003d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d58:	e71e      	b.n	8003b98 <_vfiprintf_r+0x48>
 8003d5a:	ab03      	add	r3, sp, #12
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	462a      	mov	r2, r5
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <_vfiprintf_r+0x228>)
 8003d62:	a904      	add	r1, sp, #16
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f879 	bl	8003e5c <_printf_i>
 8003d6a:	e7e4      	b.n	8003d36 <_vfiprintf_r+0x1e6>
 8003d6c:	08004484 	.word	0x08004484
 8003d70:	0800448e 	.word	0x0800448e
 8003d74:	00000000 	.word	0x00000000
 8003d78:	08003b2b 	.word	0x08003b2b
 8003d7c:	0800448a 	.word	0x0800448a

08003d80 <_printf_common>:
 8003d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d84:	4616      	mov	r6, r2
 8003d86:	4698      	mov	r8, r3
 8003d88:	688a      	ldr	r2, [r1, #8]
 8003d8a:	690b      	ldr	r3, [r1, #16]
 8003d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	bfb8      	it	lt
 8003d94:	4613      	movlt	r3, r2
 8003d96:	6033      	str	r3, [r6, #0]
 8003d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	b10a      	cbz	r2, 8003da6 <_printf_common+0x26>
 8003da2:	3301      	adds	r3, #1
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	0699      	lsls	r1, r3, #26
 8003daa:	bf42      	ittt	mi
 8003dac:	6833      	ldrmi	r3, [r6, #0]
 8003dae:	3302      	addmi	r3, #2
 8003db0:	6033      	strmi	r3, [r6, #0]
 8003db2:	6825      	ldr	r5, [r4, #0]
 8003db4:	f015 0506 	ands.w	r5, r5, #6
 8003db8:	d106      	bne.n	8003dc8 <_printf_common+0x48>
 8003dba:	f104 0a19 	add.w	sl, r4, #25
 8003dbe:	68e3      	ldr	r3, [r4, #12]
 8003dc0:	6832      	ldr	r2, [r6, #0]
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	42ab      	cmp	r3, r5
 8003dc6:	dc26      	bgt.n	8003e16 <_printf_common+0x96>
 8003dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	3b00      	subs	r3, #0
 8003dd0:	bf18      	it	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	0692      	lsls	r2, r2, #26
 8003dd6:	d42b      	bmi.n	8003e30 <_printf_common+0xb0>
 8003dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ddc:	4641      	mov	r1, r8
 8003dde:	4638      	mov	r0, r7
 8003de0:	47c8      	blx	r9
 8003de2:	3001      	adds	r0, #1
 8003de4:	d01e      	beq.n	8003e24 <_printf_common+0xa4>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	6922      	ldr	r2, [r4, #16]
 8003dea:	f003 0306 	and.w	r3, r3, #6
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	bf02      	ittt	eq
 8003df2:	68e5      	ldreq	r5, [r4, #12]
 8003df4:	6833      	ldreq	r3, [r6, #0]
 8003df6:	1aed      	subeq	r5, r5, r3
 8003df8:	68a3      	ldr	r3, [r4, #8]
 8003dfa:	bf0c      	ite	eq
 8003dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e00:	2500      	movne	r5, #0
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bfc4      	itt	gt
 8003e06:	1a9b      	subgt	r3, r3, r2
 8003e08:	18ed      	addgt	r5, r5, r3
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	341a      	adds	r4, #26
 8003e0e:	42b5      	cmp	r5, r6
 8003e10:	d11a      	bne.n	8003e48 <_printf_common+0xc8>
 8003e12:	2000      	movs	r0, #0
 8003e14:	e008      	b.n	8003e28 <_printf_common+0xa8>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4652      	mov	r2, sl
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	47c8      	blx	r9
 8003e20:	3001      	adds	r0, #1
 8003e22:	d103      	bne.n	8003e2c <_printf_common+0xac>
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	3501      	adds	r5, #1
 8003e2e:	e7c6      	b.n	8003dbe <_printf_common+0x3e>
 8003e30:	18e1      	adds	r1, r4, r3
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	2030      	movs	r0, #48	@ 0x30
 8003e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e3a:	4422      	add	r2, r4
 8003e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e44:	3302      	adds	r3, #2
 8003e46:	e7c7      	b.n	8003dd8 <_printf_common+0x58>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c8      	blx	r9
 8003e52:	3001      	adds	r0, #1
 8003e54:	d0e6      	beq.n	8003e24 <_printf_common+0xa4>
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7d9      	b.n	8003e0e <_printf_common+0x8e>
	...

08003e5c <_printf_i>:
 8003e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	7e0f      	ldrb	r7, [r1, #24]
 8003e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e64:	2f78      	cmp	r7, #120	@ 0x78
 8003e66:	4691      	mov	r9, r2
 8003e68:	4680      	mov	r8, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	469a      	mov	sl, r3
 8003e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e72:	d807      	bhi.n	8003e84 <_printf_i+0x28>
 8003e74:	2f62      	cmp	r7, #98	@ 0x62
 8003e76:	d80a      	bhi.n	8003e8e <_printf_i+0x32>
 8003e78:	2f00      	cmp	r7, #0
 8003e7a:	f000 80d1 	beq.w	8004020 <_printf_i+0x1c4>
 8003e7e:	2f58      	cmp	r7, #88	@ 0x58
 8003e80:	f000 80b8 	beq.w	8003ff4 <_printf_i+0x198>
 8003e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e8c:	e03a      	b.n	8003f04 <_printf_i+0xa8>
 8003e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e92:	2b15      	cmp	r3, #21
 8003e94:	d8f6      	bhi.n	8003e84 <_printf_i+0x28>
 8003e96:	a101      	add	r1, pc, #4	@ (adr r1, 8003e9c <_printf_i+0x40>)
 8003e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003e85 	.word	0x08003e85
 8003ea8:	08003e85 	.word	0x08003e85
 8003eac:	08003e85 	.word	0x08003e85
 8003eb0:	08003e85 	.word	0x08003e85
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003e85 	.word	0x08003e85
 8003ebc:	08003e85 	.word	0x08003e85
 8003ec0:	08003e85 	.word	0x08003e85
 8003ec4:	08003e85 	.word	0x08003e85
 8003ec8:	08004007 	.word	0x08004007
 8003ecc:	08003f33 	.word	0x08003f33
 8003ed0:	08003fc1 	.word	0x08003fc1
 8003ed4:	08003e85 	.word	0x08003e85
 8003ed8:	08003e85 	.word	0x08003e85
 8003edc:	08004029 	.word	0x08004029
 8003ee0:	08003e85 	.word	0x08003e85
 8003ee4:	08003f33 	.word	0x08003f33
 8003ee8:	08003e85 	.word	0x08003e85
 8003eec:	08003e85 	.word	0x08003e85
 8003ef0:	08003fc9 	.word	0x08003fc9
 8003ef4:	6833      	ldr	r3, [r6, #0]
 8003ef6:	1d1a      	adds	r2, r3, #4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6032      	str	r2, [r6, #0]
 8003efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f04:	2301      	movs	r3, #1
 8003f06:	e09c      	b.n	8004042 <_printf_i+0x1e6>
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	6820      	ldr	r0, [r4, #0]
 8003f0c:	1d19      	adds	r1, r3, #4
 8003f0e:	6031      	str	r1, [r6, #0]
 8003f10:	0606      	lsls	r6, r0, #24
 8003f12:	d501      	bpl.n	8003f18 <_printf_i+0xbc>
 8003f14:	681d      	ldr	r5, [r3, #0]
 8003f16:	e003      	b.n	8003f20 <_printf_i+0xc4>
 8003f18:	0645      	lsls	r5, r0, #25
 8003f1a:	d5fb      	bpl.n	8003f14 <_printf_i+0xb8>
 8003f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f20:	2d00      	cmp	r5, #0
 8003f22:	da03      	bge.n	8003f2c <_printf_i+0xd0>
 8003f24:	232d      	movs	r3, #45	@ 0x2d
 8003f26:	426d      	negs	r5, r5
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f2c:	4858      	ldr	r0, [pc, #352]	@ (8004090 <_printf_i+0x234>)
 8003f2e:	230a      	movs	r3, #10
 8003f30:	e011      	b.n	8003f56 <_printf_i+0xfa>
 8003f32:	6821      	ldr	r1, [r4, #0]
 8003f34:	6833      	ldr	r3, [r6, #0]
 8003f36:	0608      	lsls	r0, r1, #24
 8003f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f3c:	d402      	bmi.n	8003f44 <_printf_i+0xe8>
 8003f3e:	0649      	lsls	r1, r1, #25
 8003f40:	bf48      	it	mi
 8003f42:	b2ad      	uxthmi	r5, r5
 8003f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f46:	4852      	ldr	r0, [pc, #328]	@ (8004090 <_printf_i+0x234>)
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	bf14      	ite	ne
 8003f4c:	230a      	movne	r3, #10
 8003f4e:	2308      	moveq	r3, #8
 8003f50:	2100      	movs	r1, #0
 8003f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f56:	6866      	ldr	r6, [r4, #4]
 8003f58:	60a6      	str	r6, [r4, #8]
 8003f5a:	2e00      	cmp	r6, #0
 8003f5c:	db05      	blt.n	8003f6a <_printf_i+0x10e>
 8003f5e:	6821      	ldr	r1, [r4, #0]
 8003f60:	432e      	orrs	r6, r5
 8003f62:	f021 0104 	bic.w	r1, r1, #4
 8003f66:	6021      	str	r1, [r4, #0]
 8003f68:	d04b      	beq.n	8004002 <_printf_i+0x1a6>
 8003f6a:	4616      	mov	r6, r2
 8003f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f70:	fb03 5711 	mls	r7, r3, r1, r5
 8003f74:	5dc7      	ldrb	r7, [r0, r7]
 8003f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f7a:	462f      	mov	r7, r5
 8003f7c:	42bb      	cmp	r3, r7
 8003f7e:	460d      	mov	r5, r1
 8003f80:	d9f4      	bls.n	8003f6c <_printf_i+0x110>
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d10b      	bne.n	8003f9e <_printf_i+0x142>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	07df      	lsls	r7, r3, #31
 8003f8a:	d508      	bpl.n	8003f9e <_printf_i+0x142>
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	6861      	ldr	r1, [r4, #4]
 8003f90:	4299      	cmp	r1, r3
 8003f92:	bfde      	ittt	le
 8003f94:	2330      	movle	r3, #48	@ 0x30
 8003f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f9e:	1b92      	subs	r2, r2, r6
 8003fa0:	6122      	str	r2, [r4, #16]
 8003fa2:	f8cd a000 	str.w	sl, [sp]
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	aa03      	add	r2, sp, #12
 8003faa:	4621      	mov	r1, r4
 8003fac:	4640      	mov	r0, r8
 8003fae:	f7ff fee7 	bl	8003d80 <_printf_common>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d14a      	bne.n	800404c <_printf_i+0x1f0>
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fba:	b004      	add	sp, #16
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	f043 0320 	orr.w	r3, r3, #32
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	4832      	ldr	r0, [pc, #200]	@ (8004094 <_printf_i+0x238>)
 8003fca:	2778      	movs	r7, #120	@ 0x78
 8003fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	6831      	ldr	r1, [r6, #0]
 8003fd4:	061f      	lsls	r7, r3, #24
 8003fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fda:	d402      	bmi.n	8003fe2 <_printf_i+0x186>
 8003fdc:	065f      	lsls	r7, r3, #25
 8003fde:	bf48      	it	mi
 8003fe0:	b2ad      	uxthmi	r5, r5
 8003fe2:	6031      	str	r1, [r6, #0]
 8003fe4:	07d9      	lsls	r1, r3, #31
 8003fe6:	bf44      	itt	mi
 8003fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8003fec:	6023      	strmi	r3, [r4, #0]
 8003fee:	b11d      	cbz	r5, 8003ff8 <_printf_i+0x19c>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	e7ad      	b.n	8003f50 <_printf_i+0xf4>
 8003ff4:	4826      	ldr	r0, [pc, #152]	@ (8004090 <_printf_i+0x234>)
 8003ff6:	e7e9      	b.n	8003fcc <_printf_i+0x170>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f023 0320 	bic.w	r3, r3, #32
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	e7f6      	b.n	8003ff0 <_printf_i+0x194>
 8004002:	4616      	mov	r6, r2
 8004004:	e7bd      	b.n	8003f82 <_printf_i+0x126>
 8004006:	6833      	ldr	r3, [r6, #0]
 8004008:	6825      	ldr	r5, [r4, #0]
 800400a:	6961      	ldr	r1, [r4, #20]
 800400c:	1d18      	adds	r0, r3, #4
 800400e:	6030      	str	r0, [r6, #0]
 8004010:	062e      	lsls	r6, r5, #24
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	d501      	bpl.n	800401a <_printf_i+0x1be>
 8004016:	6019      	str	r1, [r3, #0]
 8004018:	e002      	b.n	8004020 <_printf_i+0x1c4>
 800401a:	0668      	lsls	r0, r5, #25
 800401c:	d5fb      	bpl.n	8004016 <_printf_i+0x1ba>
 800401e:	8019      	strh	r1, [r3, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	4616      	mov	r6, r2
 8004026:	e7bc      	b.n	8003fa2 <_printf_i+0x146>
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	6032      	str	r2, [r6, #0]
 800402e:	681e      	ldr	r6, [r3, #0]
 8004030:	6862      	ldr	r2, [r4, #4]
 8004032:	2100      	movs	r1, #0
 8004034:	4630      	mov	r0, r6
 8004036:	f7fc f8d3 	bl	80001e0 <memchr>
 800403a:	b108      	cbz	r0, 8004040 <_printf_i+0x1e4>
 800403c:	1b80      	subs	r0, r0, r6
 800403e:	6060      	str	r0, [r4, #4]
 8004040:	6863      	ldr	r3, [r4, #4]
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	2300      	movs	r3, #0
 8004046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800404a:	e7aa      	b.n	8003fa2 <_printf_i+0x146>
 800404c:	6923      	ldr	r3, [r4, #16]
 800404e:	4632      	mov	r2, r6
 8004050:	4649      	mov	r1, r9
 8004052:	4640      	mov	r0, r8
 8004054:	47d0      	blx	sl
 8004056:	3001      	adds	r0, #1
 8004058:	d0ad      	beq.n	8003fb6 <_printf_i+0x15a>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	079b      	lsls	r3, r3, #30
 800405e:	d413      	bmi.n	8004088 <_printf_i+0x22c>
 8004060:	68e0      	ldr	r0, [r4, #12]
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	4298      	cmp	r0, r3
 8004066:	bfb8      	it	lt
 8004068:	4618      	movlt	r0, r3
 800406a:	e7a6      	b.n	8003fba <_printf_i+0x15e>
 800406c:	2301      	movs	r3, #1
 800406e:	4632      	mov	r2, r6
 8004070:	4649      	mov	r1, r9
 8004072:	4640      	mov	r0, r8
 8004074:	47d0      	blx	sl
 8004076:	3001      	adds	r0, #1
 8004078:	d09d      	beq.n	8003fb6 <_printf_i+0x15a>
 800407a:	3501      	adds	r5, #1
 800407c:	68e3      	ldr	r3, [r4, #12]
 800407e:	9903      	ldr	r1, [sp, #12]
 8004080:	1a5b      	subs	r3, r3, r1
 8004082:	42ab      	cmp	r3, r5
 8004084:	dcf2      	bgt.n	800406c <_printf_i+0x210>
 8004086:	e7eb      	b.n	8004060 <_printf_i+0x204>
 8004088:	2500      	movs	r5, #0
 800408a:	f104 0619 	add.w	r6, r4, #25
 800408e:	e7f5      	b.n	800407c <_printf_i+0x220>
 8004090:	08004495 	.word	0x08004495
 8004094:	080044a6 	.word	0x080044a6

08004098 <__sflush_r>:
 8004098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	0716      	lsls	r6, r2, #28
 80040a2:	4605      	mov	r5, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	d454      	bmi.n	8004152 <__sflush_r+0xba>
 80040a8:	684b      	ldr	r3, [r1, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	dc02      	bgt.n	80040b4 <__sflush_r+0x1c>
 80040ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	dd48      	ble.n	8004146 <__sflush_r+0xae>
 80040b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	d045      	beq.n	8004146 <__sflush_r+0xae>
 80040ba:	2300      	movs	r3, #0
 80040bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80040c0:	682f      	ldr	r7, [r5, #0]
 80040c2:	6a21      	ldr	r1, [r4, #32]
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	d030      	beq.n	800412a <__sflush_r+0x92>
 80040c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	0759      	lsls	r1, r3, #29
 80040ce:	d505      	bpl.n	80040dc <__sflush_r+0x44>
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80040d6:	b10b      	cbz	r3, 80040dc <__sflush_r+0x44>
 80040d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80040e0:	6a21      	ldr	r1, [r4, #32]
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b0      	blx	r6
 80040e6:	1c43      	adds	r3, r0, #1
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	d106      	bne.n	80040fa <__sflush_r+0x62>
 80040ec:	6829      	ldr	r1, [r5, #0]
 80040ee:	291d      	cmp	r1, #29
 80040f0:	d82b      	bhi.n	800414a <__sflush_r+0xb2>
 80040f2:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <__sflush_r+0x104>)
 80040f4:	40ca      	lsrs	r2, r1
 80040f6:	07d6      	lsls	r6, r2, #31
 80040f8:	d527      	bpl.n	800414a <__sflush_r+0xb2>
 80040fa:	2200      	movs	r2, #0
 80040fc:	6062      	str	r2, [r4, #4]
 80040fe:	04d9      	lsls	r1, r3, #19
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	d504      	bpl.n	8004110 <__sflush_r+0x78>
 8004106:	1c42      	adds	r2, r0, #1
 8004108:	d101      	bne.n	800410e <__sflush_r+0x76>
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	b903      	cbnz	r3, 8004110 <__sflush_r+0x78>
 800410e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004112:	602f      	str	r7, [r5, #0]
 8004114:	b1b9      	cbz	r1, 8004146 <__sflush_r+0xae>
 8004116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800411a:	4299      	cmp	r1, r3
 800411c:	d002      	beq.n	8004124 <__sflush_r+0x8c>
 800411e:	4628      	mov	r0, r5
 8004120:	f7ff fbf4 	bl	800390c <_free_r>
 8004124:	2300      	movs	r3, #0
 8004126:	6363      	str	r3, [r4, #52]	@ 0x34
 8004128:	e00d      	b.n	8004146 <__sflush_r+0xae>
 800412a:	2301      	movs	r3, #1
 800412c:	4628      	mov	r0, r5
 800412e:	47b0      	blx	r6
 8004130:	4602      	mov	r2, r0
 8004132:	1c50      	adds	r0, r2, #1
 8004134:	d1c9      	bne.n	80040ca <__sflush_r+0x32>
 8004136:	682b      	ldr	r3, [r5, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0c6      	beq.n	80040ca <__sflush_r+0x32>
 800413c:	2b1d      	cmp	r3, #29
 800413e:	d001      	beq.n	8004144 <__sflush_r+0xac>
 8004140:	2b16      	cmp	r3, #22
 8004142:	d11e      	bne.n	8004182 <__sflush_r+0xea>
 8004144:	602f      	str	r7, [r5, #0]
 8004146:	2000      	movs	r0, #0
 8004148:	e022      	b.n	8004190 <__sflush_r+0xf8>
 800414a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800414e:	b21b      	sxth	r3, r3
 8004150:	e01b      	b.n	800418a <__sflush_r+0xf2>
 8004152:	690f      	ldr	r7, [r1, #16]
 8004154:	2f00      	cmp	r7, #0
 8004156:	d0f6      	beq.n	8004146 <__sflush_r+0xae>
 8004158:	0793      	lsls	r3, r2, #30
 800415a:	680e      	ldr	r6, [r1, #0]
 800415c:	bf08      	it	eq
 800415e:	694b      	ldreq	r3, [r1, #20]
 8004160:	600f      	str	r7, [r1, #0]
 8004162:	bf18      	it	ne
 8004164:	2300      	movne	r3, #0
 8004166:	eba6 0807 	sub.w	r8, r6, r7
 800416a:	608b      	str	r3, [r1, #8]
 800416c:	f1b8 0f00 	cmp.w	r8, #0
 8004170:	dde9      	ble.n	8004146 <__sflush_r+0xae>
 8004172:	6a21      	ldr	r1, [r4, #32]
 8004174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004176:	4643      	mov	r3, r8
 8004178:	463a      	mov	r2, r7
 800417a:	4628      	mov	r0, r5
 800417c:	47b0      	blx	r6
 800417e:	2800      	cmp	r0, #0
 8004180:	dc08      	bgt.n	8004194 <__sflush_r+0xfc>
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	4407      	add	r7, r0
 8004196:	eba8 0800 	sub.w	r8, r8, r0
 800419a:	e7e7      	b.n	800416c <__sflush_r+0xd4>
 800419c:	20400001 	.word	0x20400001

080041a0 <_fflush_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	690b      	ldr	r3, [r1, #16]
 80041a4:	4605      	mov	r5, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	b913      	cbnz	r3, 80041b0 <_fflush_r+0x10>
 80041aa:	2500      	movs	r5, #0
 80041ac:	4628      	mov	r0, r5
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	b118      	cbz	r0, 80041ba <_fflush_r+0x1a>
 80041b2:	6a03      	ldr	r3, [r0, #32]
 80041b4:	b90b      	cbnz	r3, 80041ba <_fflush_r+0x1a>
 80041b6:	f7ff faa1 	bl	80036fc <__sinit>
 80041ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f3      	beq.n	80041aa <_fflush_r+0xa>
 80041c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80041c4:	07d0      	lsls	r0, r2, #31
 80041c6:	d404      	bmi.n	80041d2 <_fflush_r+0x32>
 80041c8:	0599      	lsls	r1, r3, #22
 80041ca:	d402      	bmi.n	80041d2 <_fflush_r+0x32>
 80041cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ce:	f7ff fb9a 	bl	8003906 <__retarget_lock_acquire_recursive>
 80041d2:	4628      	mov	r0, r5
 80041d4:	4621      	mov	r1, r4
 80041d6:	f7ff ff5f 	bl	8004098 <__sflush_r>
 80041da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041dc:	07da      	lsls	r2, r3, #31
 80041de:	4605      	mov	r5, r0
 80041e0:	d4e4      	bmi.n	80041ac <_fflush_r+0xc>
 80041e2:	89a3      	ldrh	r3, [r4, #12]
 80041e4:	059b      	lsls	r3, r3, #22
 80041e6:	d4e1      	bmi.n	80041ac <_fflush_r+0xc>
 80041e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ea:	f7ff fb8d 	bl	8003908 <__retarget_lock_release_recursive>
 80041ee:	e7dd      	b.n	80041ac <_fflush_r+0xc>

080041f0 <__swbuf_r>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	460e      	mov	r6, r1
 80041f4:	4614      	mov	r4, r2
 80041f6:	4605      	mov	r5, r0
 80041f8:	b118      	cbz	r0, 8004202 <__swbuf_r+0x12>
 80041fa:	6a03      	ldr	r3, [r0, #32]
 80041fc:	b90b      	cbnz	r3, 8004202 <__swbuf_r+0x12>
 80041fe:	f7ff fa7d 	bl	80036fc <__sinit>
 8004202:	69a3      	ldr	r3, [r4, #24]
 8004204:	60a3      	str	r3, [r4, #8]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	071a      	lsls	r2, r3, #28
 800420a:	d501      	bpl.n	8004210 <__swbuf_r+0x20>
 800420c:	6923      	ldr	r3, [r4, #16]
 800420e:	b943      	cbnz	r3, 8004222 <__swbuf_r+0x32>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f000 f82a 	bl	800426c <__swsetup_r>
 8004218:	b118      	cbz	r0, 8004222 <__swbuf_r+0x32>
 800421a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800421e:	4638      	mov	r0, r7
 8004220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	6922      	ldr	r2, [r4, #16]
 8004226:	1a98      	subs	r0, r3, r2
 8004228:	6963      	ldr	r3, [r4, #20]
 800422a:	b2f6      	uxtb	r6, r6
 800422c:	4283      	cmp	r3, r0
 800422e:	4637      	mov	r7, r6
 8004230:	dc05      	bgt.n	800423e <__swbuf_r+0x4e>
 8004232:	4621      	mov	r1, r4
 8004234:	4628      	mov	r0, r5
 8004236:	f7ff ffb3 	bl	80041a0 <_fflush_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	d1ed      	bne.n	800421a <__swbuf_r+0x2a>
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	3b01      	subs	r3, #1
 8004242:	60a3      	str	r3, [r4, #8]
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	701e      	strb	r6, [r3, #0]
 800424c:	6962      	ldr	r2, [r4, #20]
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	429a      	cmp	r2, r3
 8004252:	d004      	beq.n	800425e <__swbuf_r+0x6e>
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	07db      	lsls	r3, r3, #31
 8004258:	d5e1      	bpl.n	800421e <__swbuf_r+0x2e>
 800425a:	2e0a      	cmp	r6, #10
 800425c:	d1df      	bne.n	800421e <__swbuf_r+0x2e>
 800425e:	4621      	mov	r1, r4
 8004260:	4628      	mov	r0, r5
 8004262:	f7ff ff9d 	bl	80041a0 <_fflush_r>
 8004266:	2800      	cmp	r0, #0
 8004268:	d0d9      	beq.n	800421e <__swbuf_r+0x2e>
 800426a:	e7d6      	b.n	800421a <__swbuf_r+0x2a>

0800426c <__swsetup_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	4b29      	ldr	r3, [pc, #164]	@ (8004314 <__swsetup_r+0xa8>)
 8004270:	4605      	mov	r5, r0
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	460c      	mov	r4, r1
 8004276:	b118      	cbz	r0, 8004280 <__swsetup_r+0x14>
 8004278:	6a03      	ldr	r3, [r0, #32]
 800427a:	b90b      	cbnz	r3, 8004280 <__swsetup_r+0x14>
 800427c:	f7ff fa3e 	bl	80036fc <__sinit>
 8004280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004284:	0719      	lsls	r1, r3, #28
 8004286:	d422      	bmi.n	80042ce <__swsetup_r+0x62>
 8004288:	06da      	lsls	r2, r3, #27
 800428a:	d407      	bmi.n	800429c <__swsetup_r+0x30>
 800428c:	2209      	movs	r2, #9
 800428e:	602a      	str	r2, [r5, #0]
 8004290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800429a:	e033      	b.n	8004304 <__swsetup_r+0x98>
 800429c:	0758      	lsls	r0, r3, #29
 800429e:	d512      	bpl.n	80042c6 <__swsetup_r+0x5a>
 80042a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042a2:	b141      	cbz	r1, 80042b6 <__swsetup_r+0x4a>
 80042a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d002      	beq.n	80042b2 <__swsetup_r+0x46>
 80042ac:	4628      	mov	r0, r5
 80042ae:	f7ff fb2d 	bl	800390c <_free_r>
 80042b2:	2300      	movs	r3, #0
 80042b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	2300      	movs	r3, #0
 80042c0:	6063      	str	r3, [r4, #4]
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	b94b      	cbnz	r3, 80042e6 <__swsetup_r+0x7a>
 80042d2:	89a3      	ldrh	r3, [r4, #12]
 80042d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d003      	beq.n	80042e6 <__swsetup_r+0x7a>
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 f84f 	bl	8004384 <__smakebuf_r>
 80042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ea:	f013 0201 	ands.w	r2, r3, #1
 80042ee:	d00a      	beq.n	8004306 <__swsetup_r+0x9a>
 80042f0:	2200      	movs	r2, #0
 80042f2:	60a2      	str	r2, [r4, #8]
 80042f4:	6962      	ldr	r2, [r4, #20]
 80042f6:	4252      	negs	r2, r2
 80042f8:	61a2      	str	r2, [r4, #24]
 80042fa:	6922      	ldr	r2, [r4, #16]
 80042fc:	b942      	cbnz	r2, 8004310 <__swsetup_r+0xa4>
 80042fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004302:	d1c5      	bne.n	8004290 <__swsetup_r+0x24>
 8004304:	bd38      	pop	{r3, r4, r5, pc}
 8004306:	0799      	lsls	r1, r3, #30
 8004308:	bf58      	it	pl
 800430a:	6962      	ldrpl	r2, [r4, #20]
 800430c:	60a2      	str	r2, [r4, #8]
 800430e:	e7f4      	b.n	80042fa <__swsetup_r+0x8e>
 8004310:	2000      	movs	r0, #0
 8004312:	e7f7      	b.n	8004304 <__swsetup_r+0x98>
 8004314:	20000018 	.word	0x20000018

08004318 <_sbrk_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4d06      	ldr	r5, [pc, #24]	@ (8004334 <_sbrk_r+0x1c>)
 800431c:	2300      	movs	r3, #0
 800431e:	4604      	mov	r4, r0
 8004320:	4608      	mov	r0, r1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f7fc fb98 	bl	8000a58 <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d102      	bne.n	8004332 <_sbrk_r+0x1a>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	b103      	cbz	r3, 8004332 <_sbrk_r+0x1a>
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	2000025c 	.word	0x2000025c

08004338 <__swhatbuf_r>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	460c      	mov	r4, r1
 800433c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004340:	2900      	cmp	r1, #0
 8004342:	b096      	sub	sp, #88	@ 0x58
 8004344:	4615      	mov	r5, r2
 8004346:	461e      	mov	r6, r3
 8004348:	da0d      	bge.n	8004366 <__swhatbuf_r+0x2e>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	bf14      	ite	ne
 8004356:	2340      	movne	r3, #64	@ 0x40
 8004358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800435c:	2000      	movs	r0, #0
 800435e:	6031      	str	r1, [r6, #0]
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	b016      	add	sp, #88	@ 0x58
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	466a      	mov	r2, sp
 8004368:	f000 f848 	bl	80043fc <_fstat_r>
 800436c:	2800      	cmp	r0, #0
 800436e:	dbec      	blt.n	800434a <__swhatbuf_r+0x12>
 8004370:	9901      	ldr	r1, [sp, #4]
 8004372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800437a:	4259      	negs	r1, r3
 800437c:	4159      	adcs	r1, r3
 800437e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004382:	e7eb      	b.n	800435c <__swhatbuf_r+0x24>

08004384 <__smakebuf_r>:
 8004384:	898b      	ldrh	r3, [r1, #12]
 8004386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004388:	079d      	lsls	r5, r3, #30
 800438a:	4606      	mov	r6, r0
 800438c:	460c      	mov	r4, r1
 800438e:	d507      	bpl.n	80043a0 <__smakebuf_r+0x1c>
 8004390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	2301      	movs	r3, #1
 800439a:	6163      	str	r3, [r4, #20]
 800439c:	b003      	add	sp, #12
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	ab01      	add	r3, sp, #4
 80043a2:	466a      	mov	r2, sp
 80043a4:	f7ff ffc8 	bl	8004338 <__swhatbuf_r>
 80043a8:	9f00      	ldr	r7, [sp, #0]
 80043aa:	4605      	mov	r5, r0
 80043ac:	4639      	mov	r1, r7
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7ff fb18 	bl	80039e4 <_malloc_r>
 80043b4:	b948      	cbnz	r0, 80043ca <__smakebuf_r+0x46>
 80043b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ba:	059a      	lsls	r2, r3, #22
 80043bc:	d4ee      	bmi.n	800439c <__smakebuf_r+0x18>
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	f043 0302 	orr.w	r3, r3, #2
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	e7e2      	b.n	8004390 <__smakebuf_r+0xc>
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	6020      	str	r0, [r4, #0]
 80043ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	9b01      	ldr	r3, [sp, #4]
 80043d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043da:	b15b      	cbz	r3, 80043f4 <__smakebuf_r+0x70>
 80043dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e0:	4630      	mov	r0, r6
 80043e2:	f000 f81d 	bl	8004420 <_isatty_r>
 80043e6:	b128      	cbz	r0, 80043f4 <__smakebuf_r+0x70>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	431d      	orrs	r5, r3
 80043f8:	81a5      	strh	r5, [r4, #12]
 80043fa:	e7cf      	b.n	800439c <__smakebuf_r+0x18>

080043fc <_fstat_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d07      	ldr	r5, [pc, #28]	@ (800441c <_fstat_r+0x20>)
 8004400:	2300      	movs	r3, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	f7fc fafc 	bl	8000a06 <_fstat>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	d102      	bne.n	8004418 <_fstat_r+0x1c>
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	b103      	cbz	r3, 8004418 <_fstat_r+0x1c>
 8004416:	6023      	str	r3, [r4, #0]
 8004418:	bd38      	pop	{r3, r4, r5, pc}
 800441a:	bf00      	nop
 800441c:	2000025c 	.word	0x2000025c

08004420 <_isatty_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4d06      	ldr	r5, [pc, #24]	@ (800443c <_isatty_r+0x1c>)
 8004424:	2300      	movs	r3, #0
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fc fafb 	bl	8000a26 <_isatty>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_isatty_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_isatty_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	2000025c 	.word	0x2000025c

08004440 <_init>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	bf00      	nop
 8004444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004446:	bc08      	pop	{r3}
 8004448:	469e      	mov	lr, r3
 800444a:	4770      	bx	lr

0800444c <_fini>:
 800444c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444e:	bf00      	nop
 8004450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004452:	bc08      	pop	{r3}
 8004454:	469e      	mov	lr, r3
 8004456:	4770      	bx	lr
