
01_LED2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019d0  080019d0  000029d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019e0  080019e0  0000304c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080019e0  080019e0  000029e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019e8  080019e8  0000304c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019e8  080019e8  000029e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019ec  080019ec  000029ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  080019f0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000004c  08001a3c  0000304c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001a3c  0000306c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000304c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c33  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000114f  00000000  00000000  00006caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00007e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000323  00000000  00000000  00008268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001474d  00000000  00000000  0000858b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055e4  00000000  00000000  0001ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f5f0  00000000  00000000  000222bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a18ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f84  00000000  00000000  000a18f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000a2874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000004c 	.word	0x2000004c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080019b8 	.word	0x080019b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000050 	.word	0x20000050
 80001d4:	080019b8 	.word	0x080019b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b3b      	ldr	r3, [pc, #236]	@ (800060c <MX_GPIO_Init+0x108>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a3a      	ldr	r2, [pc, #232]	@ (800060c <MX_GPIO_Init+0x108>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
 800052a:	4b38      	ldr	r3, [pc, #224]	@ (800060c <MX_GPIO_Init+0x108>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <MX_GPIO_Init+0x108>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a33      	ldr	r2, [pc, #204]	@ (800060c <MX_GPIO_Init+0x108>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <MX_GPIO_Init+0x108>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <MX_GPIO_Init+0x108>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a2c      	ldr	r2, [pc, #176]	@ (800060c <MX_GPIO_Init+0x108>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <MX_GPIO_Init+0x108>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_GPIO_Init+0x108>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a25      	ldr	r2, [pc, #148]	@ (800060c <MX_GPIO_Init+0x108>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_GPIO_Init+0x108>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000590:	481f      	ldr	r0, [pc, #124]	@ (8000610 <MX_GPIO_Init+0x10c>)
 8000592:	f000 fd67 	bl	8001064 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_6, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800059c:	481d      	ldr	r0, [pc, #116]	@ (8000614 <MX_GPIO_Init+0x110>)
 800059e:	f000 fd61 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2180      	movs	r1, #128	@ 0x80
 80005a6:	481c      	ldr	r0, [pc, #112]	@ (8000618 <MX_GPIO_Init+0x114>)
 80005a8:	f000 fd5c 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80005ac:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80005b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4812      	ldr	r0, [pc, #72]	@ (8000610 <MX_GPIO_Init+0x10c>)
 80005c6:	f000 fbc9 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_6;
 80005ca:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	480c      	ldr	r0, [pc, #48]	@ (8000614 <MX_GPIO_Init+0x110>)
 80005e4:	f000 fbba 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	@ (8000618 <MX_GPIO_Init+0x114>)
 8000600:	f000 fbac 	bl	8000d5c <HAL_GPIO_Init>

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000
 8000614:	40020400 	.word	0x40020400
 8000618:	40020800 	.word	0x40020800

0800061c <ledOn>:
	{GPIOA, GPIO_PIN_8, GPIO_PIN_SET, GPIO_PIN_RESET},
	{GPIOB, GPIO_PIN_10, GPIO_PIN_SET, GPIO_PIN_RESET}
    };

void ledOn(uint8_t num)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(led[num].port, led[num].pinNumber, led[num].onState);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <ledOn+0x34>)
 800062a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <ledOn+0x34>)
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
 8000636:	8899      	ldrh	r1, [r3, #4]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a05      	ldr	r2, [pc, #20]	@ (8000650 <ledOn+0x34>)
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	4413      	add	r3, r2
 8000640:	799b      	ldrb	r3, [r3, #6]
 8000642:	461a      	mov	r2, r3
 8000644:	f000 fd0e 	bl	8001064 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000

08000654 <ledOff>:
void ledOff(uint8_t num)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(led[num].port, led[num].pinNumber, led[num].offState);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <ledOff+0x34>)
 8000662:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <ledOff+0x34>)
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	8899      	ldrh	r1, [r3, #4]
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <ledOff+0x34>)
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	79db      	ldrb	r3, [r3, #7]
 800067a:	461a      	mov	r2, r3
 800067c:	f000 fcf2 	bl	8001064 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000

0800068c <ledLeftShift>:
{
  HAL_GPIO_TogglePin(led[num].port, led[num].pinNumber);
}

void ledLeftShift(uint8_t num)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 0; i < num; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e009      	b.n	80006b0 <ledLeftShift+0x24>
    {
      ledOn(i);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ffbc 	bl	800061c <ledOn>
      HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	@ 0x64
 80006a6:	f000 fa4f 	bl	8000b48 <HAL_Delay>
  for(uint8_t i = 0; i < num; i++)
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	3301      	adds	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	7bfa      	ldrb	r2, [r7, #15]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d3f1      	bcc.n	800069c <ledLeftShift+0x10>
    }
  HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006bc:	f000 fa44 	bl	8000b48 <HAL_Delay>
  for(uint8_t i = 0; i < num; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	e009      	b.n	80006da <ledLeftShift+0x4e>
    {
      ledOff(i);
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffc3 	bl	8000654 <ledOff>
      HAL_Delay(100);
 80006ce:	2064      	movs	r0, #100	@ 0x64
 80006d0:	f000 fa3a 	bl	8000b48 <HAL_Delay>
  for(uint8_t i = 0; i < num; i++)
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	3301      	adds	r3, #1
 80006d8:	73bb      	strb	r3, [r7, #14]
 80006da:	7bba      	ldrb	r2, [r7, #14]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3f1      	bcc.n	80006c6 <ledLeftShift+0x3a>
    }
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <ledRightShift>:
void ledRightShift(uint8_t num)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  uint8_t end = (num == 0) ? 0 : num;     // 0이면 0까지, 아니면 num까지
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	737b      	strb	r3, [r7, #13]
  for (int8_t i = 7; i >= (int8_t)end; i--) {
 80006fa:	2307      	movs	r3, #7
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	e00c      	b.n	800071a <ledRightShift+0x2e>
      ledOn((uint8_t)i);
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff8a 	bl	800061c <ledOn>
      HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	@ 0x64
 800070a:	f000 fa1d 	bl	8000b48 <HAL_Delay>
  for (int8_t i = 7; i >= (int8_t)end; i--) {
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	3b01      	subs	r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800071e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000722:	429a      	cmp	r2, r3
 8000724:	daec      	bge.n	8000700 <ledRightShift+0x14>
  }
  HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072a:	f000 fa0d 	bl	8000b48 <HAL_Delay>
  for (int8_t i = 7; i >= (int8_t)end; i--) {
 800072e:	2307      	movs	r3, #7
 8000730:	73bb      	strb	r3, [r7, #14]
 8000732:	e00c      	b.n	800074e <ledRightShift+0x62>
      ledOff((uint8_t)i);
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff8c 	bl	8000654 <ledOff>
      HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	@ 0x64
 800073e:	f000 fa03 	bl	8000b48 <HAL_Delay>
  for (int8_t i = 7; i >= (int8_t)end; i--) {
 8000742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	3b01      	subs	r3, #1
 800074a:	b2db      	uxtb	r3, r3
 800074c:	73bb      	strb	r3, [r7, #14]
 800074e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000752:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000756:	429a      	cmp	r2, r3
 8000758:	daec      	bge.n	8000734 <ledRightShift+0x48>
  }
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <ledFlower>:
void ledFlower(uint8_t num)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  for(uint8_t i = 4; i < num; i++)
 800076e:	2304      	movs	r3, #4
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	e011      	b.n	8000798 <ledFlower+0x34>
    {
      ledOn(i);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff50 	bl	800061c <ledOn>
      ledOn(8 - i - 1);
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff49 	bl	800061c <ledOn>
      HAL_Delay(300);
 800078a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800078e:	f000 f9db 	bl	8000b48 <HAL_Delay>
  for(uint8_t i = 4; i < num; i++)
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3301      	adds	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3e9      	bcc.n	8000774 <ledFlower+0x10>
    }

  for(uint8_t i = 4; i < num; i++)
 80007a0:	2304      	movs	r3, #4
 80007a2:	73bb      	strb	r3, [r7, #14]
 80007a4:	e011      	b.n	80007ca <ledFlower+0x66>
    {
      ledOff(i);
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff53 	bl	8000654 <ledOff>
      ledOff(8 - i - 1);
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	f1c3 0307 	rsb	r3, r3, #7
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff4c 	bl	8000654 <ledOff>
      HAL_Delay(300);
 80007bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c0:	f000 f9c2 	bl	8000b48 <HAL_Delay>
  for(uint8_t i = 4; i < num; i++)
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	3301      	adds	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
 80007ca:	7bba      	ldrb	r2, [r7, #14]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d3e9      	bcc.n	80007a6 <ledFlower+0x42>
    }

}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 f93f 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f83b 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff fe8b 	bl	8000504 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      // 전체 점등
      for(uint8_t i = 0; i < 8; i++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	e006      	b.n	8000802 <main+0x26>
	{
	  ledOn(i);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff10 	bl	800061c <ledOn>
      for(uint8_t i = 0; i < 8; i++)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	3301      	adds	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b07      	cmp	r3, #7
 8000806:	d9f5      	bls.n	80007f4 <main+0x18>
	}
      HAL_Delay(2000);
 8000808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800080c:	f000 f99c 	bl	8000b48 <HAL_Delay>

      // 전체 소등
      for(uint8_t i = 0; i < 8; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	71bb      	strb	r3, [r7, #6]
 8000814:	e006      	b.n	8000824 <main+0x48>
	{
	  ledOff(i);
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff1b 	bl	8000654 <ledOff>
      for(uint8_t i = 0; i < 8; i++)
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	3301      	adds	r3, #1
 8000822:	71bb      	strb	r3, [r7, #6]
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	2b07      	cmp	r3, #7
 8000828:	d9f5      	bls.n	8000816 <main+0x3a>
	}
      HAL_Delay(2000);
 800082a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800082e:	f000 f98b 	bl	8000b48 <HAL_Delay>

      // 왼쪽으로 차례대로
      ledLeftShift(8);
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff ff2a 	bl	800068c <ledLeftShift>
      HAL_Delay(2000);
 8000838:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800083c:	f000 f984 	bl	8000b48 <HAL_Delay>

      // 오른쪽으로 차례대로
      ledRightShift(0);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff53 	bl	80006ec <ledRightShift>
      HAL_Delay(2000);
 8000846:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800084a:	f000 f97d 	bl	8000b48 <HAL_Delay>

      // 플라워? 가운데에서 가생이로
      ledFlower(8);
 800084e:	2008      	movs	r0, #8
 8000850:	f7ff ff88 	bl	8000764 <ledFlower>
      HAL_Delay(2000);
 8000854:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000858:	f000 f976 	bl	8000b48 <HAL_Delay>
      for(uint8_t i = 0; i < 8; i++)
 800085c:	e7c7      	b.n	80007ee <main+0x12>
	...

08000860 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	@ 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f876 	bl	8001960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <SystemClock_Config+0xc8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a26      	ldr	r2, [pc, #152]	@ (8000928 <SystemClock_Config+0xc8>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <SystemClock_Config+0xc8>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <SystemClock_Config+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a20      	ldr	r2, [pc, #128]	@ (800092c <SystemClock_Config+0xcc>)
 80008aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <SystemClock_Config+0xcc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008d4:	2364      	movs	r3, #100	@ 0x64
 80008d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008dc:	2304      	movs	r3, #4
 80008de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0320 	add.w	r3, r7, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fbd7 	bl	8001098 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x94>
    {
      Error_Handler();
 80008f0:	f000 f81e 	bl	8000930 <Error_Handler>
    }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60fb      	str	r3, [r7, #12]
      |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2103      	movs	r1, #3
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fe39 	bl	8001588 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xc0>
    {
      Error_Handler();
 800091c:	f000 f808 	bl	8000930 <Error_Handler>
    }
}
 8000920:	bf00      	nop
 8000922:	3750      	adds	r7, #80	@ 0x50
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <Error_Handler+0x8>

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000950:	6453      	str	r3, [r2, #68]	@ 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	@ 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 f891 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a14:	f7ff ffea 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	@ (8000a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f000 ff97 	bl	8001970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fecb 	bl	80007dc <main>
  bx  lr    
 8000a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000a54:	080019f0 	.word	0x080019f0
  ldr r2, =_sbss
 8000a58:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000a5c:	2000006c 	.word	0x2000006c

08000a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <HAL_Init+0x40>)
 8000a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_Init+0x40>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_Init+0x40>)
 8000a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f931 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff ff50 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023c00 	.word	0x40023c00

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f93b 	bl	8000d42 <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae4:	f000 f911 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000040 	.word	0x20000040
 8000b00:	20000048 	.word	0x20000048
 8000b04:	20000044 	.word	0x20000044

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	@ (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000048 	.word	0x20000048
 8000b2c:	20000068 	.word	0x20000068

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000068 	.word	0x20000068

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000048 	.word	0x20000048

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	@ 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff5c 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb0 	bl	8000cb0 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e159      	b.n	800102c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8148 	bne.w	8001026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d130      	bne.n	8000e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d017      	beq.n	8000e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a2 	beq.w	8001026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a56      	ldr	r2, [pc, #344]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a52      	ldr	r2, [pc, #328]	@ (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	@ (800104c <HAL_GPIO_Init+0x2f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	@ (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1fe>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a47      	ldr	r2, [pc, #284]	@ (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a46      	ldr	r2, [pc, #280]	@ (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1f6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a45      	ldr	r2, [pc, #276]	@ (800105c <HAL_GPIO_Init+0x300>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1f2>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	@ (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fcc:	4a24      	ldr	r2, [pc, #144]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f aea2 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40013800 	.word	0x40013800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021000 	.word	0x40021000
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e267      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010b6:	4b88      	ldr	r3, [pc, #544]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b82      	ldr	r3, [pc, #520]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b7e      	ldr	r3, [pc, #504]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e242      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a75      	ldr	r2, [pc, #468]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b70      	ldr	r3, [pc, #448]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6c      	ldr	r2, [pc, #432]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a68      	ldr	r2, [pc, #416]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b66      	ldr	r3, [pc, #408]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a65      	ldr	r2, [pc, #404]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcee 	bl	8000b30 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcea 	bl	8000b30 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e207      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5b      	ldr	r3, [pc, #364]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcda 	bl	8000b30 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcd6 	bl	8000b30 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	@ 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1f3      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b51      	ldr	r3, [pc, #324]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b41      	ldr	r3, [pc, #260]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c7      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3b      	ldr	r3, [pc, #236]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4937      	ldr	r1, [pc, #220]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b34      	ldr	r3, [pc, #208]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fc8f 	bl	8000b30 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc8b 	bl	8000b30 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a8      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4925      	ldr	r1, [pc, #148]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_RCC_OscConfig+0x244>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fc6e 	bl	8000b30 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fc6a 	bl	8000b30 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e187      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d036      	beq.n	80012f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fc4e 	bl	8000b30 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc4a 	bl	8000b30 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e167      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <HAL_RCC_OscConfig+0x240>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e01b      	b.n	80012f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_RCC_OscConfig+0x248>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc37 	bl	8000b30 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e00e      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc33 	bl	8000b30 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d907      	bls.n	80012e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e150      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 80012d8:	40023800 	.word	0x40023800
 80012dc:	42470000 	.word	0x42470000
 80012e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ea      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8097 	beq.w	800142c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001302:	4b81      	ldr	r3, [pc, #516]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b7d      	ldr	r3, [pc, #500]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	4a7c      	ldr	r2, [pc, #496]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	@ 0x40
 800131e:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b77      	ldr	r3, [pc, #476]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b74      	ldr	r3, [pc, #464]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbf3 	bl	8000b30 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fbef 	bl	8000b30 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e10c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <HAL_RCC_OscConfig+0x474>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x2ea>
 8001374:	4b64      	ldr	r3, [pc, #400]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a63      	ldr	r2, [pc, #396]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b05      	cmp	r3, #5
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x30c>
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a5e      	ldr	r2, [pc, #376]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	4b5c      	ldr	r3, [pc, #368]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139a:	4a5b      	ldr	r2, [pc, #364]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a2:	e00b      	b.n	80013bc <HAL_RCC_OscConfig+0x324>
 80013a4:	4b58      	ldr	r3, [pc, #352]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a57      	ldr	r2, [pc, #348]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80013b0:	4b55      	ldr	r3, [pc, #340]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b4:	4a54      	ldr	r2, [pc, #336]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013b6:	f023 0304 	bic.w	r3, r3, #4
 80013ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d015      	beq.n	80013f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbb4 	bl	8000b30 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fbb0 	bl	8000b30 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0cb      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ee      	beq.n	80013cc <HAL_RCC_OscConfig+0x334>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff fb9e 	bl	8000b30 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb9a 	bl	8000b30 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0b5      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1ee      	bne.n	80013f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001420:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a38      	ldr	r2, [pc, #224]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a1 	beq.w	8001578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b08      	cmp	r3, #8
 8001440:	d05c      	beq.n	80014fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d141      	bne.n	80014ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb6e 	bl	8000b30 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb6a 	bl	8000b30 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e087      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	491b      	ldr	r1, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb43 	bl	8000b30 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb3f 	bl	8000b30 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e05c      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x416>
 80014cc:	e054      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x478>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb2c 	bl	8000b30 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff fb28 	bl	8000b30 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e045      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x470>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x444>
 80014fa:	e03d      	b.n	8001578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e038      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000
 8001510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_RCC_OscConfig+0x4ec>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d028      	beq.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d121      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11a      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800154a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800154c:	4293      	cmp	r3, r2
 800154e:	d111      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa5a 	bl	8000b30 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fa56 	bl	8000b30 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9ba 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	080019d0 	.word	0x080019d0
 800174c:	20000040 	.word	0x20000040
 8001750:	20000044 	.word	0x20000044

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001758:	b094      	sub	sp, #80	@ 0x50
 800175a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176c:	4b79      	ldr	r3, [pc, #484]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 8001778:	2b08      	cmp	r3, #8
 800177a:	f200 80e1 	bhi.w	8001940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x34>
 8001782:	2b04      	cmp	r3, #4
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x3a>
 8001786:	e0db      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b73      	ldr	r3, [pc, #460]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x204>)
 800178a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800178c:	e0db      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_RCC_GetSysClockFreq+0x208>)
 8001790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001792:	e0d8      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800179c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179e:	4b6d      	ldr	r3, [pc, #436]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	2200      	movs	r2, #0
 80017b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017c6:	4622      	mov	r2, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	f04f 0100 	mov.w	r1, #0
 80017d2:	0159      	lsls	r1, r3, #5
 80017d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d8:	0150      	lsls	r0, r2, #5
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4621      	mov	r1, r4
 80017e0:	1a51      	subs	r1, r2, r1
 80017e2:	6139      	str	r1, [r7, #16]
 80017e4:	4629      	mov	r1, r5
 80017e6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017f8:	4659      	mov	r1, fp
 80017fa:	018b      	lsls	r3, r1, #6
 80017fc:	4651      	mov	r1, sl
 80017fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001802:	4651      	mov	r1, sl
 8001804:	018a      	lsls	r2, r1, #6
 8001806:	4651      	mov	r1, sl
 8001808:	ebb2 0801 	subs.w	r8, r2, r1
 800180c:	4659      	mov	r1, fp
 800180e:	eb63 0901 	sbc.w	r9, r3, r1
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800181e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001826:	4690      	mov	r8, r2
 8001828:	4699      	mov	r9, r3
 800182a:	4623      	mov	r3, r4
 800182c:	eb18 0303 	adds.w	r3, r8, r3
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	462b      	mov	r3, r5
 8001834:	eb49 0303 	adc.w	r3, r9, r3
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001846:	4629      	mov	r1, r5
 8001848:	024b      	lsls	r3, r1, #9
 800184a:	4621      	mov	r1, r4
 800184c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001850:	4621      	mov	r1, r4
 8001852:	024a      	lsls	r2, r1, #9
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185a:	2200      	movs	r2, #0
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001864:	f7fe fcb8 	bl	80001d8 <__aeabi_uldivmod>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4613      	mov	r3, r2
 800186e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001870:	e058      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b38      	ldr	r3, [pc, #224]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	2200      	movs	r2, #0
 800187a:	4618      	mov	r0, r3
 800187c:	4611      	mov	r1, r2
 800187e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
 8001888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800188c:	4642      	mov	r2, r8
 800188e:	464b      	mov	r3, r9
 8001890:	f04f 0000 	mov.w	r0, #0
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	0159      	lsls	r1, r3, #5
 800189a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189e:	0150      	lsls	r0, r2, #5
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4641      	mov	r1, r8
 80018a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018aa:	4649      	mov	r1, r9
 80018ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018c4:	ebb2 040a 	subs.w	r4, r2, sl
 80018c8:	eb63 050b 	sbc.w	r5, r3, fp
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	00eb      	lsls	r3, r5, #3
 80018d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018da:	00e2      	lsls	r2, r4, #3
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4643      	mov	r3, r8
 80018e2:	18e3      	adds	r3, r4, r3
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	464b      	mov	r3, r9
 80018e8:	eb45 0303 	adc.w	r3, r5, r3
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018fa:	4629      	mov	r1, r5
 80018fc:	028b      	lsls	r3, r1, #10
 80018fe:	4621      	mov	r1, r4
 8001900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001904:	4621      	mov	r1, r4
 8001906:	028a      	lsls	r2, r1, #10
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800190e:	2200      	movs	r2, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	61fa      	str	r2, [r7, #28]
 8001914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001918:	f7fe fc5e 	bl	80001d8 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	3301      	adds	r3, #1
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800193e:	e002      	b.n	8001946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001948:	4618      	mov	r0, r3
 800194a:	3750      	adds	r7, #80	@ 0x50
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200

08001960 <memset>:
 8001960:	4402      	add	r2, r0
 8001962:	4603      	mov	r3, r0
 8001964:	4293      	cmp	r3, r2
 8001966:	d100      	bne.n	800196a <memset+0xa>
 8001968:	4770      	bx	lr
 800196a:	f803 1b01 	strb.w	r1, [r3], #1
 800196e:	e7f9      	b.n	8001964 <memset+0x4>

08001970 <__libc_init_array>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	4d0d      	ldr	r5, [pc, #52]	@ (80019a8 <__libc_init_array+0x38>)
 8001974:	4c0d      	ldr	r4, [pc, #52]	@ (80019ac <__libc_init_array+0x3c>)
 8001976:	1b64      	subs	r4, r4, r5
 8001978:	10a4      	asrs	r4, r4, #2
 800197a:	2600      	movs	r6, #0
 800197c:	42a6      	cmp	r6, r4
 800197e:	d109      	bne.n	8001994 <__libc_init_array+0x24>
 8001980:	4d0b      	ldr	r5, [pc, #44]	@ (80019b0 <__libc_init_array+0x40>)
 8001982:	4c0c      	ldr	r4, [pc, #48]	@ (80019b4 <__libc_init_array+0x44>)
 8001984:	f000 f818 	bl	80019b8 <_init>
 8001988:	1b64      	subs	r4, r4, r5
 800198a:	10a4      	asrs	r4, r4, #2
 800198c:	2600      	movs	r6, #0
 800198e:	42a6      	cmp	r6, r4
 8001990:	d105      	bne.n	800199e <__libc_init_array+0x2e>
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	f855 3b04 	ldr.w	r3, [r5], #4
 8001998:	4798      	blx	r3
 800199a:	3601      	adds	r6, #1
 800199c:	e7ee      	b.n	800197c <__libc_init_array+0xc>
 800199e:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a2:	4798      	blx	r3
 80019a4:	3601      	adds	r6, #1
 80019a6:	e7f2      	b.n	800198e <__libc_init_array+0x1e>
 80019a8:	080019e8 	.word	0x080019e8
 80019ac:	080019e8 	.word	0x080019e8
 80019b0:	080019e8 	.word	0x080019e8
 80019b4:	080019ec 	.word	0x080019ec

080019b8 <_init>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr

080019c4 <_fini>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr
